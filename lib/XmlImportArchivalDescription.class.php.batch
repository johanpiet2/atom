<?php
/*
 * This file is part of the Access to Memory (AtoM) software.
 *
 * Access to Memory (AtoM) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Access to Memory (AtoM) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Access to Memory (AtoM).  If not, see <http://www.gnu.org/licenses/>.
*/
/**
 * Import an XML document into Qubit.
 *
 * @package    AccesstoMemory
 * @subpackage library
 * @author     MJ Suhonos <mj@suhonos.ca>
 * @author     Peter Van Garderen <peter@artefactual.com>
 * @author     Mike Cantelon <mike@artefactual.com>
 * @author     Johan Pieterse <johan.pieterse@sita.co.za>
 */
class XmlImportArchivalDescription
{
    protected $errors = null, $rootObject = null, $parent = null;
    public function import($xmlFile, $options = array(), $type = null)
    {
        // load the XML document into a DOMXML object
        $importDOM = $this->loadXML($xmlFile, $options);
        //QubitXMLImport::addLog("Import File: " . $xmlFile, "", get_class($this), false);
        // if we were unable to parse the XML file at all
        if (empty($importDOM->documentElement)) {
            QubitXMLImport::addLog($xmlFile, "Unable to parse XML file: malformed or unresolvable entities", get_class($this), true);
            $errorMsg = sfContext::getInstance()->i18n->__('Unable to parse XML file: malformed or unresolvable entities');
            throw new Exception($errorMsg);
        }
        // if libxml threw errors, populate them to show in the template
        if ($importDOM->libxmlerrors) {
            // warning condition, XML file has errors (perhaps not well-formed or invalid?)
            foreach ($importDOM->libxmlerrors as $libxmlerror) {
                $xmlerrors[] = sfContext::getInstance()->i18n->__('libxml error %code% on line %line% in input file: %message%', array('%code%' => $libxmlerror->code, '%message%' => $libxmlerror->message, '%line%' => $libxmlerror->line));
            }
            $this->errors = array_merge((array)$this->errors, $xmlerrors);
        }
        if ('eac-cpf' == $importDOM->documentElement->tagName) {
            $this->rootObject = new QubitActor;
            $this->rootObject->parentId = QubitActor::ROOT_ID;
            $eac = new sfEacPlugin($this->rootObject);
            $eac->parse($importDOM);
            $this->rootObject->save();
            if (isset($eac->itemsSubjectOf)) {
                foreach ($eac->itemsSubjectOf as $item) {
                    $relation = new QubitRelation;
                    $relation->object = $this->rootObject;
                    $relation->typeId = QubitTerm::NAME_ACCESS_POINT_ID;
                    $item->relationsRelatedBysubjectId[] = $relation;
                    $item->save();
                }
            }
            return $this;
        }
        // FIXME hardcoded until we decide how these will be developed
        $validSchemas = array(
        // document type declarations
        '+//ISBN 1-931666-00-8//DTD ead.dtd Encoded Archival Description (EAD) Version 2002//EN' => 'ead', '-//Society of American Archivists//DTD ead.dtd (Encoded Archival Description (EAD) Version 1.0)//EN' => 'ead1',
        // namespaces
        'http://www.loc.gov/METS/' => 'mets', 'http://www.loc.gov/mods/' => 'mods', 'http://www.loc.gov/MARC21/slim' => 'marc',
        // root element names
        //'collection' => 'marc',
        //'record' => 'marc',
        //'mets' => 'mets',
        'record' => 'oai_dc_record', 
        'dc' => 'dc', 
        'oai_dc:dc' => 'dc', 
        'dublinCore' => 'dc', 
        'metadata' => 'dc',
        'mods' => 'mods', 
        'ead' => 'ead', 
        'add' => 'alouette', 
        'http://www.w3.org/2004/02/skos/core#' => 'skos');
        // determine what kind of schema we're trying to import
        $schemaDescriptors = array($importDOM->documentElement->tagName);
        if (!empty($importDOM->namespaces)) {
            krsort($importDOM->namespaces);
            $schemaDescriptors = array_merge($schemaDescriptors, $importDOM->namespaces);
        }
        if (!empty($importDOM->doctype)) {
            $schemaDescriptors = array_merge($schemaDescriptors, array($importDOM->doctype->name, $importDOM->doctype->systemId, $importDOM->doctype->publicId));
        }
        foreach ($schemaDescriptors as $descriptor) {
            if (array_key_exists($descriptor, $validSchemas)) {
                $importSchema = $validSchemas[$descriptor];
            }
        }
        switch ($importSchema) {
        case 'ead':
            // just validate EAD import for now until we can get StrictXMLParsing working for all schemas in the self::LoadXML function. Having problems right now loading schemas.
            // $importDOM->validate();
            //  if libxml threw errors, populate them to show in the template
            // foreach (libxml_get_errors() as $libxmlerror)
            // {
            //    $this->errors[] = sfContext::getInstance()->i18n->__('libxml error %code% on line %line% in input file: %message%', array('%code%' => $libxmlerror->code, '%message%' => $libxmlerror->message, '%line%' => $libxmlerror->line));
            //  }
            break;

        case 'skos':
            $criteria = new Criteria;
            $criteria->add(QubitSetting::NAME, 'plugins');
            $setting = QubitSetting::getOne($criteria);
            if (null === $setting || !in_array('sfSkosPlugin', unserialize($setting->getValue(array('sourceCulture' => true))))) {
                throw new sfException(sfContext::getInstance()->i18n->__('The SKOS plugin is not enabled'));
            }
            $importTerms = sfSkosPlugin::parse($importDOM, $options);
            $this->rootObject = QubitTaxonomy::getById(QubitTaxonomy::SUBJECT_ID);
            $this->count = count($importTerms);
            return $this;
            break;
        }
        $importMap = sfConfig::get('sf_app_module_dir') . DIRECTORY_SEPARATOR . 'object' . DIRECTORY_SEPARATOR . 'config' . DIRECTORY_SEPARATOR . 'import' . DIRECTORY_SEPARATOR . $importSchema . '.yml';
        if (!file_exists($importMap)) {
            // error condition, unknown schema or no import filter
            $errorMsg = sfContext::getInstance()->i18n->__('Unknown schema or import format: "%format%"', array('%format%' => $importSchema));
            QubitXMLImport::addLog($importMap, $errorMsg, get_class($this), true);
            throw new Exception($errorMsg);
        }
        $this->schemaMap = sfYaml::load($importMap);
        // if XSLs are specified in the mapping, process them
        if (!empty($this->schemaMap['processXSLT'])) {
            // pre-filter through XSLs in order
            foreach ((array)$this->schemaMap['processXSLT'] as $importXSL) {
                $importXSL = sfConfig::get('sf_data_dir') . DIRECTORY_SEPARATOR . 'xslt' . DIRECTORY_SEPARATOR . $importXSL;
                if (file_exists($importXSL)) {
                    // instantiate an XSLT parser
                    $xslDOM = new DOMDocument;
                    $xslDOM->load($importXSL);
                    // Configure the transformer
                    $xsltProc = new XSLTProcessor;
                    $xsltProc->registerPHPFunctions();
                    $xsltProc->importStyleSheet($xslDOM);
                    $importDOM->loadXML($xsltProc->transformToXML($importDOM));
                    unset($xslDOM);
                    unset($xsltProc);
                } else {
                    $this->errors[] = sfContext::getInstance()->i18n->__('Unable to load import XSL filter (Archival Description): "%importXSL%"', array('%importXSL%' => $importXSL));
                }
            }
            // re-initialize xpath on the new XML
            $importDOM->xpath = new DOMXPath($importDOM);
        }
        //QubitXMLImport::addLog("Import Schema: " . $importSchema, "", get_class($this), false);
        // switch source culture if language is set in an EAD document
        if ($importSchema == 'ead') {
            if (is_object($langusage = $importDOM->xpath->query('//eadheader/profiledesc/langusage/language/@langcode'))) {
                //QubitXMLImport::addLog("langusage is_object: " . is_object($langusage = $importDOM->xpath->query('//eadheader/profiledesc/langusage/language/@langcode')), "", get_class($this), false);
                $sf_user = sfContext::getInstance()->user;
                $currentCulture = $sf_user->getCulture();
                $langCodeConvertor = new fbISO639_Map;
                //QubitXMLImport::addLog("sf_user: " . $sf_user->getCulture(), "", get_class($this), false);
                foreach ($langusage as $language) {
                   // QubitXMLImport::addLog("language->nodeValue: " . $language->nodeValue, "", get_class($this), false);
                    $isocode = trim(preg_replace('/[\n\r\s]+/', ' ', $language->nodeValue));
                    // convert to Symfony culture code
                    if (!$twoCharCode = strtolower($langCodeConvertor->getID1($isocode, false))) {
                        $twoCharCode = $isocode;
                    }
                    // Check to make sure that the selected language is supported with a Symfony i18n data file.
                    // If not it will cause a fatal error in the Language List component on every response.
                    ProjectConfiguration::getActive()->loadHelpers('I18N');
                    try {
                        format_language($twoCharCode, $twoCharCode);
                    }
                    catch(Exception $e) {
                        $this->errors[] = sfContext::getInstance()->i18n->__('EAD "langmaterial" is set to') . ': "' . $isocode . '". ' . sfContext::getInstance()->i18n->__('This language is currently not supported.');
                        continue;
                    }
                    if ($currentCulture !== $twoCharCode) {
                        $this->errors[] = sfContext::getInstance()->i18n->__('EAD "langmaterial" is set to') . ': "' . $isocode . '" (' . format_language($twoCharCode, 'en') . '). ' . sfContext::getInstance()->i18n->__('Your XML document has been saved in this language and your user interface has just been switched to this language.');
                    }
                    $sf_user->setCulture($twoCharCode);
                    // can only set to one language, so have to break once the first valid language is encountered
                    break;
                }
            }
        }
        unset($this->schemaMap['processXSLT']);
        // go through schema map and populate objects/properties
        foreach ($this->schemaMap as $name => $mapping) {
            // if object is not defined or a valid class, we can't process this mapping
            if (empty($mapping['Object']) || !class_exists('Qubit' . $mapping['Object'])) {
                $this->errors[] = sfContext::getInstance()->i18n->__('Non-existent class defined in import mapping: "%class%"', array('%class%' => 'Qubit' . $mapping['Object']));
                continue;
            }
            //QubitXMLImport::addLog("Schema Map: " . $mapping['Object'], "", get_class($this), false);
            // get a list of XML nodes to process
            $nodeList = $importDOM->xpath->query($mapping['XPath']);
            $databaseManager = new sfDatabaseManager(sfContext::getInstance()->getConfiguration());
            $databaseConnection = $databaseManager->getDatabase('propel');
            $username = $databaseConnection->getParameter('username');
            $password = $databaseConnection->getParameter('password');
            $dsnInfo = ($databaseConnection->getParameter('dsn'));
            try {
                $conn = new PDO($dsnInfo, $username, $password);
                $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            }
            catch(PDOException $e) {
                print 'Connection failed: ' . $e->getMessage() . "\n";
            }
            $rowcount = 0;
            // only for mainframe import
            // remove when batch is imported
            $csvfile = null;
            $publishPath = QubitSetting::getByName('publish_path');
            if ($publishPath == null) {
                QubitXMLImport::addLog($publishPath, "No upload path defined. Contact support/administrator", get_class($this), true);
                throw new sfException(sfContext::getInstance()->i18n->__("No upload path defined. Contact support/administrator"));
            } else {
            	date_default_timezone_set('Africa/Johannesburg');
            	
            	$publishname = "publish_" . date("20"."ymdH", time()) . ".csv"; //file per hour
            	//$publishname = "publish_" . date("20"."ymdHi", time()) . ".csv"; //file per minute
                //$publishname = "publish_" . date("Y-m-dHis") . ".csv"; //file per second
            	//echo "publishname=".$publishname."\n";
                //save to CSV 
                
				if (file_exists($publishPath . $publishname)) {
		            $csvfile = fopen($publishPath . $publishname, "a") or die("Unable to open file!");
				} else {
				    $csvfile = fopen($publishPath . $publishname, "a") or die("Unable to open file!");
				    $csvStringHeader = "identifier|unitid|unittitle|dateType|unitdate|startDate|endDate|level|extent|source|filereference|volume|partno|corpname|repocorpcode|countrycode|repocorpname|custodhist|scopecontent|appraisal|accruals|arrangement|accessrestrict|userestrict|langcode|scriptcode|langmaterial|phystech|otherfindaid|originalsloc|altformavail|relatedmaterial|relateddescriptions|bibliography|note|publicationnote|archivistnote|subject|geogname|name|descriptionIdentifier|institutionIdentifier|rules|statusDescription|levelOfDetail|date|desclanguage|descscript|langcode|scriptcode|recordtype|size|type|classification|availabilityId|registryidentifier|registry|filePath\n";
				    fwrite($csvfile, $csvStringHeader);
				}
            }
            foreach ($nodeList as $domNode) {
                // create a new object
                $class = 'Qubit' . $mapping['Object'];
                $currentObject = new $class;
                //QubitXMLImport::addLog("currentObject: New", "", get_class($this), false);
                // set the rootObject to use for initial display in successful import
                if (!$this->rootObject) {
                    $this->rootObject = $currentObject;
                }
                // use DOM to populate object
                //$time_pre0 = microtime(true);
                $this->populateMainFrameObject($domNode, $importDOM, $mapping, $importSchema, $conn, $csvfile); 
                //$time_post0 = microtime(true);
                //$exec_time0 = $time_post0 - $time_pre0;
                //print "Total time diff: ".$exec_time0."\n";
                //$rowcount++;
                //print "Row: ".$rowcount."\n"; 
                
                
            }
            //$conn->close();
            $conn = null;

            //rename or move
            
	        $bulkImport = QubitSetting::getByName('bulk');
            $bulk_rename = QubitSetting::getByName('bulk_rename');
            if ($bulk_rename == "0") {
                $options['rename'] = false;
            } else {
                $options['rename'] = true;
            }
            $movePath = QubitSetting::getByName('move_path');
            if ($movePath == null) {
                throw new sfException(sfContext::getInstance()->i18n->__("No move path/folder defined. Contact support/administrator"));
            } else {
                $arguments['rename'] = $movePath;
            }

	            
 		   if ($bulkImport == "1") {
			    if ($options['rename']) {
			        $name = basename($xmlFile) . date("Y-m-d His") . ".loaded";
			        $result=rename($xmlFile, $movePath."/".$name );
	        		if (!$result) 
	        		{
	        			print "ERROR renaming ".$xmlFile." -> ".$movePath.$name."\n";
			            QubitXMLImport::addLog("Error: ---- " . $xmlFile . " moved to " . $movePath.$name, "", get_class($this), false);
			        }
			        else
			        {
	        			print "Renamed ".$xmlFile." -> ".$movePath.$name."\n";
			        	QubitXMLImport::addLog(basename($xmlFile) . " moved to (" . $movePath . " and renamed to " . $name . " on " . date('c'), "", get_class($this), true);
			    	}
			    }
			} else {
			    if ($options['rename']) {
			        $name = basename($xmlFile) . date("Y-m-d His") . ".loaded";
			        rename($xmlFile, $options['rename'] . "/$name");
			        if (!rename($xmlFile, $options['rename'] . "/$name")) {
			            $error = error_get_last();
			            QubitXMLImport::addLog("Error:" . $error . " ---- " . basename($xmlFile) . " moved to (" . $options['rename'] . " and renamed to " . $name . " on " . date('c'), "", get_class($this), true);
			        }
			        else
			        {
	        			print "Renamed ".$xmlFile." -> "." moved to (" . $options['rename'] . " and renamed to " . $name . " on " . date('c');
				        QubitXMLImport::addLog(basename($xmlFile) . " moved to (" . $options['rename'] . " and renamed to " . $name . " on " . date('c'), "", get_class($this), true);
			        }
			    }
			}
        }
        QubitXMLImport::addLog("Import rows: " . $rowcount, "", get_class($this), true);
        fclose($csvfile);
        return $this;
    }
    
    private function populateMainFrameObject(&$domNode, &$importDOM, &$mapping, $importSchema, $conn, $csvfile)
    {
        // go through methods and populate properties
        $this->processMainFrame($domNode, $importDOM, $mapping['Methods'], $currentObject, $importSchema);
        //print "title:".$this->registry."<br>";
        $this->insertRecord($this->title, $this->creatorName, $this->corpName, $this->repositoryName, $this->batch, $this->partno, $this->volno, $this->refno, $this->sysno, $this->rackno, $this->recordtype, $this->unitid, $this->repositoryCountryCode, $this->repositoryCode, $this->dates, $this->note, $this->source, $this->registry, $this->registryIdentifier, $this->uniquenumber, $conn, $csvfile);
    }
    private function populateObject(&$domNode, &$importDOM, &$mapping, &$currentObject, $importSchema)
    {
        // if a parent path is specified, try to parent the node
        if (empty($mapping['Parent'])) {
            $parentNodes = new DOMNodeList;
        } else {
            $parentNodes = $importDOM->xpath->query('(' . $mapping['Parent'] . ')', $domNode);
        }
        //QubitXMLImport::addLog("function populateObject", "", get_class($this), false);
        if ($parentNodes->length > 0) {
            // parent ID comes from last node in the list because XPath forces forward document order
            $parentId = $parentNodes->item($parentNodes->length - 1)->getAttribute('xml:id');
            unset($parentNodes);
            if (!empty($parentId) && is_callable(array($currentObject, 'setParentId'))) {
                $currentObject->parentId = $parentId;
            }
        } else {
            // orphaned object, set root if possible
            if (isset($this->parent)) {
                $currentObject->parentId = $this->parent->id;
                //QubitXMLImport::addLog("isset(this->parent): " . isset($this->parent), "", get_class($this), false);
            } else if (is_callable(array($currentObject, 'setRoot'))) {
                $currentObject->setRoot();
                //QubitXMLImport::addLog("is_callable(array(currentObject, 'setRoot')): " . is_callable(array($currentObject, 'setRoot')), "", get_class($this), false);
            } else {
                QubitXMLImport::addLog("not parent - not callable", "", get_class($this), true);
            }
        }
        // go through methods and populate properties
        $this->processMethods($domNode, $importDOM, $mapping['Methods'], $currentObject, $importSchema);
        // write contact details to repository - if repository does not exist, create otherwise do nothing
        $this->repositoryId = XmlImportArchivalDescription::setRepositoryWithCodes($this->repositoryName, $this->unitid, $this->repositoryCountryCode, $this->repositoryCode, $this->addressValues);
        //QubitXMLImport::addLog($this->repositoryId, " XmlImportArchivalDescription ", get_class($this), false);
        // make sure we have a publication status set before indexing
        if ($currentObject instanceof QubitInformationObject && count($currentObject->statuss) == 0) {
            $currentObject->setPublicationStatus(sfConfig::get('app_defaultPubStatus', QubitTerm::PUBLICATION_STATUS_DRAFT_ID));
            if (isset($this->repositoryId)) {
                $currentObject->repositoryId = $this->repositoryId;
            }
        }
        // if it exist from same Repository, create duplicate-renamed, entry else update
        if (($informationObject = QubitInformationObject::getByIdentifier($this->unitid)) !== null) {
            //QubitXMLImport::addLog($currentObject->identifier, "Find record: " . $this->unitid, get_class($this), false);
            if ($informationObject->repositoryId == $this->repositoryId) {
                // if not skip duplicates
                $bulk_skip_duplicates = QubitSetting::getByName('bulk_skip_duplicates');
                if ($bulk_skip_duplicates != "1") {
                    //QubitXMLImport::addLog($currentObject->identifier, "Repository Id: " . $this->repositoryId, get_class($this), false);
                    if (isset($this->repositoryId)) {
                        $currentObject->repositoryId = $this->repositoryId;
                    }
                    if (isset($this->unitid)) {
                        //create random unique number to add to dupliacted record
                        $uuID = self::rand_chars(10, FALSE);
                        $currentObject->identifier = $this->unitid . "-dup-" . $uuID;
                        QubitXMLImport::addLog($currentObject->identifier, "Duplicate with same Repository Id - renamed", get_class($this), true);
                    }
                    if (isset($this->partno)) {
                        $currentObject->partNo = $this->partno;
                    }
                    if (isset($this->recordtype)) {
                        $typeTermId = QubitTermI18n::getIdByName($this->recordtype, QubitTaxonomy::FORMATS);
                        $typeTermId = $typeTermId->id;
                        $currentObject->formatId = $typeTermId;
                    }
                    // save the object after it's fully-populated
                    $currentObject->save();
                    // Create Access Object for Mainframe import - Should be removed after Data Migration
                    // Tag in .xml created from batch import creator <batch>
                    if ($this->batch == "true") {
                        QubitXMLImport::addLog($this->unitid, "Batch - Duplicate with same Repository Id - renamed ", get_class($this), true);
                        // get id's to add
                        $classification = QubitXmlImport::translateNameToTermId2('Classification', QubitTerm::CLASSIFICATION_ID, 'Public');
                        $publish = QubitXmlImport::translateNameToTermId2('Publish', QubitTerm::PUBLISH_ID, 'Yes');
                        $sensitive = QubitXmlImport::translateNameToTermId2('Sensitive', QubitTerm::SENSITIVITY_ID, 'No');
                        $refusal = QubitXmlImport::translateNameToTermId2('Refusal', QubitTerm::REFUSALS_ID, 'None');
                        $restrictions = QubitXmlImport::translateNameToTermId2('Restrictions', QubitTerm::RESTRICTION_ID, 'None');
                        $accessObject = new QubitAccessObject;
                        $accessObject->name = $currentObject->title;
                        $accessObject->refusalId = $refusal;
                        $accessObject->sensitivityId = $sensitive;
                        $accessObject->publishId = $publish;
                        $accessObject->classificationId = $classification;
                        $accessObject->restrictionId = $restrictions;
                        $accessObject->object_id = $currentObject->id;
                        $accessObject->save();
                        // create relation between Access Object and Archival Description $subjectId, $objectId, $typeId
                        QubitXmlImport::createRelation($accessObject->id, $currentObject->id, QubitTaxonomy::ACCESS_TYPE_ID);
                        // do batch create of .xml publish file
                        //QubitXMLImport::addBatchPublishXML($accessObject, $currentObject);
                        //QubitXMLImport::addBatchPublishCSV($accessObject, $currentObject, $this->CSVValues);
                        
                    }
                } else {
                    QubitXMLImport::addLog($currentObject->identifier, "Batch - Skipping duplicate", get_class($this), true);
                }
                // write the ID onto the current XML node for tracking
                $domNode->setAttribute('xml:id', $currentObject->id);
            } else {
                QubitXMLImport::addLog($this->unitid, "Duplicate exist with different Repository Id", get_class($this), true);
                // duplicate exist with different Repository Id
                if (isset($this->repositoryId)) {
                    $currentObject->repositoryId = $this->repositoryId;
                }
                if (isset($this->unitid)) {
                    $currentObject->identifier = $this->unitid;
                }
                if (isset($this->partno)) {
                    $currentObject->partNo = $this->partno;
                }
		        if (isset($this->size)) {
				    $criteria = new Criteria;
				    $criteria->add(QubitTermI18n::NAME, $this->size);
		            $currentObject->size = QubitTerm::getOne($criteria);
		        }
		        if (isset($this->type)) {
				    $criteria = new Criteria;
				    $criteria->add(QubitTermI18n::NAME, $this->type);
		            $currentObject->typeId = QubitTerm::getOne($criteria);
		        }

                if (isset($this->available)) {
				    $criteria = new Criteria;
				    $criteria->add(QubitTermI18n::NAME, $this->available);
		            $currentObject->available = QubitTerm::getOne($criteria);
                }
                if (isset($this->recordtype)) {
                    $typeTermId = QubitTermI18n::getIdByName($this->recordtype, QubitTaxonomy::FORMATS);
                    $typeTermId = $typeTermId->id;
                    $currentObject->formatId = $typeTermId;
                }
                // save the object after it's fully-populated
                $currentObject->save();
                // Create Access Object for Mainframe import - Should be removed after Data Migration
                // Tag in .xml created from batch import creator <batch>
                if ($this->batch == "true") {
                    QubitXMLImport::addLog($this->unitid, "Batch - duplicate exist with different Repository Id ", get_class($this), true);
                    // get id's to add
                    $classification = QubitXmlImport::translateNameToTermId2('Classification', QubitTerm::CLASSIFICATION_ID, 'Public');
                    $publish = QubitXmlImport::translateNameToTermId2('Publish', QubitTerm::PUBLISH_ID, 'Yes');
                    $sensitive = QubitXmlImport::translateNameToTermId2('Sensitive', QubitTerm::SENSITIVITY_ID, 'No');
                    $refusal = QubitXmlImport::translateNameToTermId2('Refusal', QubitTerm::REFUSALS_ID, 'None');
                    $restrictions = QubitXmlImport::translateNameToTermId2('Restrictions', QubitTerm::RESTRICTION_ID, 'None');
                    $accessObject = new QubitAccessObject;
                    $accessObject->name = $currentObject->title;
                    $accessObject->refusalId = $refusal;
                    $accessObject->sensitivityId = $sensitive;
                    $accessObject->publishId = $publish;
                    $accessObject->classificationId = $classification;
                    $accessObject->restrictionId = $restrictions;
                    $accessObject->object_id = $currentObject->id;
                    $accessObject->save();
                    // create relation between Access Object and Archival Description $subjectId, $objectId, $typeId
                    QubitXmlImport::createRelation($accessObject->id, $currentObject->id, QubitTaxonomy::ACCESS_TYPE_ID);
                    // do batch create of .xml publish file
                    //QubitXMLImport::addBatchPublishXML($accessObject, $currentObject);
                    //QubitXMLImport::addBatchPublishCSV($accessObject, $currentObject, $this->CSVValues);
                    
                }
                // write the ID onto the current XML node for tracking
                $domNode->setAttribute('xml:id', $currentObject->id);
            }
        } else {
            //QubitXMLImport::addLog($this->unitid, "New entry: ", get_class($this), false);
            //Does not exist
            if (isset($this->repositoryId)) {
                $currentObject->repositoryId = $this->repositoryId;
            }
           // QubitXMLImport::addLog("", "isset(this->unitid): " . isset($this->unitid), get_class($this), false);
            if (isset($this->unitid)) {
                $currentObject->identifier = $this->unitid;
            }
            if (isset($this->partno)) {
                $currentObject->partNo = $this->partno;
            }
            if (isset($this->recordtype)) {
                $typeTermId = QubitTermI18n::getIdByName($this->recordtype, QubitTaxonomy::FORMATS);
                $typeTermId = $typeTermId->id;
                $currentObject->formatId = $typeTermId;
            }
           // QubitXMLImport::addLog($this->unitid, " - New entry - " . $currentObject->identifier, get_class($this), false);
            // save the object after it's fully-populated
            $currentObject->save();
            // Create Access Object for Mainframe import - Should be removed after Data Migration
            // Tag in .xml created from batch import creator <batch>
            if ($this->batch == "true") {
                //QubitXMLImport::addLog($this->unitid, "XmlImportArchivalDescription - batch - new entry", get_class($this), false);
                // get id's to add
                $classification = QubitXmlImport::translateNameToTermId2('Classification', QubitTerm::CLASSIFICATION_ID, 'Public');
                $publish = QubitXmlImport::translateNameToTermId2('Publish', QubitTerm::PUBLISH_ID, 'Yes');
                $sensitive = QubitXmlImport::translateNameToTermId2('Sensitive', QubitTerm::SENSITIVITY_ID, 'No');
                $refusal = QubitXmlImport::translateNameToTermId2('Refusal', QubitTerm::REFUSALS_ID, 'None');
                $restrictions = QubitXmlImport::translateNameToTermId2('Restrictions', QubitTerm::RESTRICTION_ID, 'None');
                $accessObject = new QubitAccessObject;
                $accessObject->name = $currentObject->title;
                $accessObject->refusalId = $refusal;
                $accessObject->sensitivityId = $sensitive;
                $accessObject->publishId = $publish;
                $accessObject->classificationId = $classification;
                $accessObject->restrictionId = $restrictions;
                $accessObject->object_id = $currentObject->id;
                $accessObject->save();
                // create relation between Access Object and Archival Description $subjectId, $objectId, $typeId
                QubitXmlImport::createRelation($accessObject->id, $currentObject->id, QubitTaxonomy::ACCESS_TYPE_ID);
                // do batch create of .xml publish file
                //QubitXMLImport::addBatchPublishXML($accessObject, $currentObject);
                //QubitXMLImport::addBatchPublishCSV($accessObject, $currentObject, $this->CSVValues);
                
            }
            // write the ID onto the current XML node for tracking
            $domNode->setAttribute('xml:id', $currentObject->id);
        }
    }
    /*
     * Cycle through methods and populate object based on relevant data
     *
     * @return  null
    */
    private function processMethods(&$domNode, &$importDOM, $methods, &$currentObject, $importSchema)
    {
        //QubitXMLImport::addLog("function processMethods", "", get_class($this), false);
        // go through methods and populate properties
        foreach ($methods as $name => $methodMap) {
            // if method is not defined, we can't process this mapping
            if (empty($methodMap['Method']) || !is_callable(array($currentObject, $methodMap['Method']))) {
                $this->errors[] = sfContext::getInstance()->i18n->__('Non-existent method defined in import mapping: "%method%"', array('%method%' => $methodMap['Method']));
                continue;
            }
            // Get a list of XML nodes to process
            // This condition mitigates a problem where the XPath query wasn't working
            // as expected, see #4302 for more details
            if ($importSchema == 'dc' && $methodMap['XPath'] != '.') {
                $nodeList2 = $importDOM->getElementsByTagName($methodMap['XPath']);
            } else {
                $nodeList2 = $importDOM->xpath->query($methodMap['XPath'], $domNode);
            }
            if (is_object($nodeList2)) {
               // QubitXMLImport::addLog("methods: " . $name, "", get_class($this), false);
                switch ($name) {
                case 'controlaccess_name':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/controlaccess/name', $item)) !== null) {
                            $this->creatorName = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'controlaccess_corpname':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/controlaccess/corpname', $item)) !== null) {
                            $this->corpName = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'repository':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/repository/corpname', $item)) !== null) {
                            $this->repositoryName = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'batch':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//batch', $item)) !== null) {
                            $this->batch = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'partNo':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/partno', $item)) !== null) {
                            $this->partno = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'recordType':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/recordtype', $item)) !== null) {
                            $this->recordtype = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'identifier':
                    if (($childNode = $importDOM->xpath->query('.', $item)) !== null) {
                        foreach ($nodeList2 as $item) {
                            if (($childNode = $importDOM->xpath->query('//did/unitid', $item)) !== null) {
                                $this->unitid = QubitXmlImport::normalizeNodeValue($item);
                               // QubitXMLImport::addLog($this->unitid, "unitid/identifier", get_class($this), false);
                            }
                            if (($childNode = $importDOM->xpath->query('//did/unitid/@countrycode', $item)) !== null) {
                                $this->repositoryCountryCode = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('//did/unitid/@repositorycode', $item)) !== null) {
                                $this->repositoryCode = $importDOM->xpath->query('@repositorycode', $item)->item(0)->nodeValue;
                              //  QubitXMLImport::addLog($this->repositoryCode, "Repository Code", get_class($this), false);
                            }
                        }
                    }
                    break;

                case 'repositoryAddress':
                    if (($childNode = $importDOM->xpath->query('.', $item)) !== null) {
                        foreach ($nodeList2 as $item) {
                            if (($childNode = $importDOM->xpath->query('./primarycontact', $item)) !== null) {
                                $primaryContact = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./title', $item)) !== null) {
                                $title = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./contactperson', $item)) !== null) {
                                $contactPerson = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./position', $item)) !== null) {
                                $position = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./email', $item)) !== null) {
                                $email = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./fax', $item)) !== null) {
                                $fax = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./telephone', $item)) !== null) {
                                $telephone = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./cell', $item)) !== null) {
                                $cell = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./website', $item)) !== null) {
                                $website = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./streetaddress', $item)) !== null) {
                                $streetAddress = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./city', $item)) !== null) {
                                $city = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./region', $item)) !== null) {
                                $region = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./countrycode', $item)) !== null) {
                                $countryCode = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./postalcode', $item)) !== null) {
                                $postalCode = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./postaladdress', $item)) !== null) {
                                $postalAddress = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./postalcity', $item)) !== null) {
                                $postalCity = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./postalregion', $item)) !== null) {
                                $postalRegion = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./postalcountrycode', $item)) !== null) {
                                $postalCountryCode = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./postalpostcode', $item)) !== null) {
                                $postalPostCode = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./latitude', $item)) !== null) {
                                $latitude = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./longitude', $item)) !== null) {
                                $longitude = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./note', $item)) !== null) {
                                $note = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('./contacttype', $item)) !== null) {
                                $contactType = $childNode->item(0)->nodeValue;
                            }
                            $this->addressValues = array('primaryContact' => $primaryContact, 'title' => $title, 'contactPerson' => $contactPerson, 'position' => $position, 'email' => $email, 'fax' => $fax, 'telephone' => $telephone, 'cell' => $cell, 'website' => $website, 'streetAddress' => $streetAddress, 'city' => $city, 'region' => $region, 'countryCode' => $countryCode, 'postalCode' => $postalCode, 'postalAddress' => $postalAddress, 'postalCity' => $postalCity, 'postalRegion' => $postalRegion, 'postalCountryCode' => $postalCountryCode, 'postalPostCode' => $postalPostCode, 'latitude' => $latitude, 'longitude' => $longitude, 'note' => $note, 'contactType' => $contactType);
                        }
                    }
                    break;
                    // hack: some multi-value elements (e.g. 'languages') need to get passed as one array instead of individual nodes values
                    
                case 'languages':
                case 'language':
                    $langCodeConvertor = new fbISO639_Map;
                    $isID3 = ($importSchhema == 'dc') ? true : false;
                    $value = array();
                    foreach ($nodeList2 as $item) {
                        if ($twoCharCode = $langCodeConvertor->getID1($item->nodeValue, $isID3)) {
                            $value[] = strtolower($twoCharCode);
                        } else {
                            $value[] = $item->nodeValue;
                        }
                    }
                    $currentObject->language = $value;
                    break;

                case 'processinfo':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('p/date', $item)) !== null) {
                            $currentObject->revisionHistory = $childNode->item(0)->nodeValue;
                        }
                        if (($childNode = $importDOM->xpath->query('p', $item)) !== null) {
                            $note = '';
                            foreach ($childNode as $pNode) {
                                // A <p> node inside <processinfo> with no other children,
                                // this is part of an archivist's note.
                                if ($pNode->childNodes->length === 1 && $pNode->firstChild->nodeType === XML_TEXT_NODE) {
                                    // If this isn't our first <p> in the note, add newlines
                                    // to simulate paragraph.
                                    if (strlen($note) > 0) {
                                        $note.= "\n\n";
                                    }
                                    $note.= $pNode->nodeValue;
                                }
                            }
                            if (strlen($note) > 0) {
                                $currentObject->importEadNote(array('note' => $note, 'noteTypeId' => QubitTerm::ARCHIVIST_NOTE_ID));
                            }
                        }
                        // TODO: Add more child node processing, for <note> <head> etc.
                        
                    }
                    break;

                case 'flocat':
                case 'digital_object':
                    $resources = array();
                    foreach ($nodeList2 as $item) {
                        $resources[] = $item->nodeValue;
                    }
                    if (0 < count($resources)) {
                        $currentObject->importDigitalObjectFromUri($resources, $this->errors);
                    }
                    break;

                case 'container':
                    foreach ($nodeList2 as $item) {
                        $container = $item->nodeValue;
                        $type = $importDOM->xpath->query('@type', $item)->item(0)->nodeValue;
                        $label = $importDOM->xpath->query('@label', $item)->item(0)->nodeValue;
                        $parent = $importDOM->xpath->query('@parent', $item)->item(0)->nodeValue;
                        $location = $importDOM->xpath->query('did/physloc[@id="' . $parent . '"]', $domNode)->item(0)->nodeValue;
                        $currentObject->importPhysicalObject($location, $container, $type, $label);
                    }
                    break;

                case 'relatedunitsofdescription':
                    $i = 0;
                    $nodeValue = '';
                    foreach ($nodeList2 as $item) {
                        if ($i++ == 0) {
                            $nodeValue.= QubitXmlImport::normalizeNodeValue($item);
                        } else {
                            $nodeValue.= "\n\n" . QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    $currentObject->setRelatedUnitsOfDescription($nodeValue);
                    break;

                default:
                    foreach ($nodeList2 as $key => $domNode2) {
                        // normalize the node text; NB: this will strip any child elements, eg. HTML tags
                        $nodeValue = QubitXmlImport::normalizeNodeValue($domNode2);
                        // if you want the full XML from the node, use this
                        $nodeXML = $domNode2->ownerDocument->saveXML($domNode2);
                        // set the parameters for the method call
                        if (empty($methodMap['Parameters'])) {
                            $parameters = array($nodeValue);
                        } else {
                            $parameters = array();
                            foreach ((array)$methodMap['Parameters'] as $parameter) {
                                // if the parameter begins with %, evaluate it as an XPath expression relative to the current node
                                if ('%' == substr($parameter, 0, 1)) {
                                    // evaluate the XPath expression
                                    $xPath = substr($parameter, 1);
                                    $result = $importDOM->xpath->query($xPath, $domNode2);
                                    if ($result->length > 1) {
                                        // convert nodelist into an array
                                        foreach ($result as $element) {
                                            $resultArray[] = $element->nodeValue;
                                        }
                                        $parameters[] = $resultArray;
                                    } else {
                                        // pass the node value unaltered; this provides an alternative to $nodeValue above
                                        $parameters[] = $result->item(0)->nodeValue;
                                    }
                                } else {
                                    // Confirm DOMXML node exists to avoid warnings at run-time
                                    if (false !== preg_match_all('/\$importDOM->xpath->query\(\'@\w+\', \$domNode2\)->item\(0\)->nodeValue/', $parameter, $matches)) {
                                        foreach ($matches[0] as $match) {
                                            $str = str_replace('->nodeValue', '', $match);
                                            if (null !== ($node = eval('return ' . $str . ';'))) {
                                                // Substitute node value for search string
                                                $parameter = str_replace($match, '\'' . $node->nodeValue . '\'', $parameter);
                                            } else {
                                                // Replace empty nodes with null in parameter string
                                                $parameter = str_replace($match, 'null', $parameter);
                                            }
                                        }
                                    }
                                    eval('$parameters[] = ' . $parameter . ';');
                                }
                            }
                        }
                        // Load taxonomies into variables to avoid use of magic numbers
                        /*$termData = QubitFlatfileImport::loadTermsFromTaxonomies(array(
                        QubitTaxonomy::NOTE_TYPE_ID      => 'noteTypes',
                        QubitTaxonomy::RAD_NOTE_ID       => 'radNoteTypes',
                        QubitTaxonomy::RAD_TITLE_NOTE_ID => 'titleNoteTypes',
                        QubitTaxonomy::FORMATS			 => 'recordTypes'
                        ));
                        
                        $titleVariationNoteTypeId            = array_search('Variations in title', $termData['titleNoteTypes']);
                        $titleAttributionsNoteTypeId         = array_search('Attributions and conjectures', $termData['titleNoteTypes']);
                        $titleContinuationNoteTypeId         = array_search('Continuation of title', $termData['titleNoteTypes']);
                        $titleStatRepNoteTypeId              = array_search('Statements of responsibility', $termData['titleNoteTypes']);
                        $titleParallelNoteTypeId             = array_search('Parallel titles and other title information', $termData['titleNoteTypes']);
                        $titleSourceNoteTypeId               = array_search('Source of title proper', $termData['titleNoteTypes']);
                        $alphaNumericaDesignationsNoteTypeId = array_search('Alpha-numeric designations', $termData['radNoteTypes']);
                        $physDescNoteTypeId                  = array_search('Physical description', $termData['radNoteTypes']);
                        $editionNoteTypeId                   = array_search('Edition', $termData['radNoteTypes']);
                        $conservationNoteTypeId              = array_search('Conservation', $termData['radNoteTypes']);
                        
                        $pubSeriesNoteTypeId                 = array_search("Publisher's series", $termData['radNoteTypes']);
                        $rightsNoteTypeId                    = array_search("Rights", $termData['radNoteTypes']);
                        $materialNoteTypeId                  = array_search("Accompanying material", $termData['radNoteTypes']);
                        $generalNoteTypeId                   = array_search("General note", $termData['radNoteTypes']); */
                        // invoke the object and method defined in the schema map
                        call_user_func_array(array( & $currentObject, $methodMap['Method']), $parameters);
                    }
                }
                unset($nodeList2);
            }
        }
    }
    /*
     * Cycle through methods and populate object based on relevant data
     *
     * @return  null
    */
    private function processMainFrame(&$domNode, &$importDOM, $methods, &$currentObject, $importSchema)
    {
        //QubitXMLImport::addLog("function processMainFrame", "", get_class($this), True);
        // go through methods and populate properties
        foreach ($methods as $name => $methodMap) {
            // Get a list of XML nodes to process
            // This condition mitigates a problem where the XPath query wasn't working
            // as expected, see #4302 for more details
            if ($importSchema == 'dc' && $methodMap['XPath'] != '.') {
                $nodeList2 = $importDOM->getElementsByTagName($methodMap['XPath']);
            } else {
                $nodeList2 = $importDOM->xpath->query($methodMap['XPath'], $domNode);
            }
            if (is_object($nodeList2)) {
                //QubitXMLImport::addLog("methods: ".$name, "", get_class($this), false);
                switch ($name) {
                case 'title':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/unittitle', $item)) !== null) {
                            $this->title = QubitXmlImport::normalizeNodeValue($item);
                            //$this->title = addslashes($this->title);
                            
                        }
                    }
                    break;

                case 'controlaccess_name':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/controlaccess/name', $item)) !== null) {
                            $this->creatorName = QubitXmlImport::normalizeNodeValue($item);
                            //$this->creatorName = "";
                        }
                    }
                    break;

                case 'batch_corpname':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//bioghist/chronlist/chronitem/eventgrp/event/origination/corpname', $item)) !== null) {
                            $this->corpName = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'repository':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/repository/corpname', $item)) !== null) {
                            $this->repositoryName = QubitXmlImport::normalizeNodeValue($item);
                        }
                        if (($childNode = $importDOM->xpath->query('//did/repository/name', $item)) !== null) {
                            if ($this->repositoryName == "") {
                                $this->repositoryName = QubitXmlImport::normalizeNodeValue($item);
                            }
                        }
                    }
                    break;

                case 'dates':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/unitdate', $item)) !== null) {
                            $this->dates = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'sources':
                    $this->note = array();
                    //do something
                    $this->note = null;
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query("//did/note[@type='sourcesDescription']", $item)) !== null) {
                            $this->note[] = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'registryprefix':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/registryprefix', $item)) !== null) {
                            $this->registryIdentifier = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'registry':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/registry', $item)) !== null) {
                            $this->registry = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'batch':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//batch', $item)) !== null) {
                            $this->batch = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'partNo':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/partno', $item)) !== null) {
                            $this->partno = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'uniquenumber':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/uniquenumber', $item)) !== null) {
                            $this->uniquenumber = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'sourceNo':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/source', $item)) !== null) {
                            $this->source = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'volNo':
                    foreach ($nodeList2 as $item) { {
                            $this->volno = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'refNo':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/refno', $item)) !== null) {
                            $this->refno = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'sysNo':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/sysno', $item)) !== null) {
                            $this->sysno = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'rackNo':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/rackno', $item)) !== null) {
                            $this->rackno = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'recordType':
                    foreach ($nodeList2 as $item) {
                        if (($childNode = $importDOM->xpath->query('//did/recordtype', $item)) !== null) {
                            $this->recordtype = QubitXmlImport::normalizeNodeValue($item);
                        }
                    }
                    break;

                case 'identifier':
                    if (($childNode = $importDOM->xpath->query('.', $item)) !== null) {
                        foreach ($nodeList2 as $item) {
                            if (($childNode = $importDOM->xpath->query('//did/unitid', $item)) !== null) {
                                $this->unitid = QubitXmlImport::normalizeNodeValue($item);
                                //QubitXMLImport::addLog($this->unitid, "unitid/identifier", get_class($this), false);
                            }
                            if (($childNode = $importDOM->xpath->query('//did/unitid/@countrycode', $item)) !== null) {
                                $this->repositoryCountryCode = $childNode->item(0)->nodeValue;
                            }
                            if (($childNode = $importDOM->xpath->query('//did/unitid/@repositorycode', $item)) !== null) {
                                $this->repositoryCode = $importDOM->xpath->query('@repositorycode', $item)->item(0)->nodeValue;
                                //QubitXMLImport::addLog($this->repositoryCode, "Repository Code", get_class($this), false);
                            }
                        }
                    }
                    break;

                case 'repositoryAddress':
                    // hack: some multi-value elements (e.g. 'languages') need to get passed as one array instead of individual nodes values
                    
                case 'languages':
                case 'language':
                case 'processinfo':
                case 'flocat':
                case 'digital_object':
                case 'container':
                case 'relatedunitsofdescription':
                default:
                    foreach ($nodeList2 as $key => $domNode2) {
                        /*             $nodeValue = QubitXmlImport::normalizeNodeValue($domNode2);
                        $nodeXML = $domNode2->ownerDocument->saveXML($domNode2);
                        if (empty($methodMap['Parameters']))
                        {
                        $parameters = array($nodeValue);
                        }
                        else
                        {
                        $parameters = array();
                        foreach ((array) $methodMap['Parameters'] as $parameter)
                        {
                        if ('%' == substr($parameter, 0, 1))
                        {
                        $xPath = substr($parameter, 1);
                        $result = $importDOM->xpath->query($xPath, $domNode2);
                        
                        if ($result->length > 1)
                        {
                        foreach ($result as $element)
                        {
                        $resultArray[] = $element->nodeValue;
                        }
                        $parameters[] = $resultArray;
                        }
                        else
                        {
                        $parameters[] = $result->item(0)->nodeValue;
                        }
                        }
                        else
                        {
                        if (false !== preg_match_all('/\$importDOM->xpath->query\(\'@\w+\', \$domNode2\)->item\(0\)->nodeValue/', $parameter, $matches))
                        {
                        foreach ($matches[0] as $match)
                        {
                        $str = str_replace('->nodeValue', '', $match);
                        
                        if (null !== ($node = eval('return '.$str.';')))
                        {
                          $parameter = str_replace($match, '\''.$node->nodeValue.'\'', $parameter);
                        }
                        else
                        {
                          $parameter = str_replace($match, 'null', $parameter);
                        }
                        }
                        }
                        eval('$parameters[] = '.$parameter.';');
                        }
                        }
                        }
                        */
                    }
                }
                unset($nodeList2);
            }
        }
    }
    /**
     * modified helper methods from (http://www.php.net/manual/en/ref.dom.php):
     *
     * - create a DOMDocument from a file
     * - parse the namespaces in it
     * - create a XPath object with all the namespaces registered
     *  - load the schema locations
     *  - validate the file on the main schema (the one without prefix)
     *
     * @param string $xmlFile XML document file
     * @param array $options optional parameters
     * @return DOMDocument an object representation of the XML document
     */
    protected function loadXML($xmlFile, $options = array())
    {
        libxml_use_internal_errors(true);
        // FIXME: trap possible load validation errors (just suppress for now)
        $err_level = error_reporting(0);
        $doc = new DOMDocument('1.0', 'UTF-8');
        // Default $strictXmlParsing to false
        $strictXmlParsing = (isset($options['strictXmlParsing'])) ? $options['strictXmlParsing'] : false;
        // Pre-fetch the raw XML string from file so we can remove any default
        // namespaces and reuse the string for later when finding/registering namespaces.
        $rawXML = file_get_contents($xmlFile);
        if ($strictXmlParsing) {
            // enforce all XML parsing rules and validation
            $doc->validateOnParse = true;
            $doc->resolveExternals = true;
        } else {
            // try to load whatever we've got, even if it's malformed or invalid
            $doc->recover = true;
            $doc->strictErrorChecking = false;
        }
        $doc->formatOutput = false;
        $doc->preserveWhitespace = false;
        $doc->substituteEntities = true;
        $doc->loadXML($this->removeDefaultNamespace($rawXML));
        $xsi = false;
        $doc->namespaces = array();
        $doc->xpath = new DOMXPath($doc);
        // pass along any XML errors that have been generated
        $doc->libxmlerrors = libxml_get_errors();
        // if the document didn't parse correctly, stop right here
        if (empty($doc->documentElement)) {
            return $doc;
        }
        error_reporting($err_level);
        // look through the entire document for namespaces
        // FIXME: #2787
        // https://projects.artefactual.com/issues/2787
        //
        // THIS SHOULD ONLY INSPECT THE ROOT NODE NAMESPACES
        // Consider: http://www.php.net/manual/en/book.dom.php#73793
        $re = '/xmlns:([^=]+)="([^"]+)"/';
        preg_match_all($re, $rawXML, $mat, PREG_SET_ORDER);
        foreach ($mat as $xmlns) {
            $pre = $xmlns[1];
            $uri = $xmlns[2];
            $doc->namespaces[$pre] = $uri;
            if ($pre == '') {
                $pre = 'noname';
            }
            $doc->xpath->registerNamespace($pre, $uri);
        }
        /*
        if (!isset($doc->namespaces['']))
        {
        $doc->namespaces[''] = $doc->documentElement->lookupnamespaceURI(null);
        }
        
        if ($xsi)
        {
        $doc->schemaLocations = array();
        $lst = $doc->xpath->query('//@$xsi:schemaLocation');
        foreach ($lst as $el)
        {
        $re = "{[\\s\n\r]*([^\\s\n\r]+)[\\s\n\r]*([^\\s\n\r]+)}";
        preg_match_all($re, $el->nodeValue, $mat);
        for ($i = 0; $i < count($mat[0]); $i++)
        {
          $value = $mat[2][$i];
          $doc->schemaLocations[$mat[1][$i]] = $value;
        }
        }
        
        // validate document against default namespace schema
        $doc->schemaValidate($doc->schemaLocations[$doc->namespaces['']]);
        }
        */
        return $doc;
    }
    /**
     * Return true if import had errors
     *
     * @return boolean
     */
    public function hasErrors()
    {
        return $this->errors != null;
    }
    /**
     * Return array of error messages
     *
     * @return unknown
     */
    public function getErrors()
    {
        return $this->errors;
    }
    /**
     * Get the root object for the import
     *
     * @return mixed the root object (object type depends on import type)
     */
    public function getRootObject()
    {
        return $this->rootObject;
    }
    /**
     * Get the root object for the import
     *
     * @return mixed the root object (object type depends on import type)
     */
    public function setParent($parent)
    {
        return $this->parent = $parent;
    }
    /**
     * Make sure to remove any default namespaces from
     * EAD tags. See issue #7280 for details.
     */
    private function removeDefaultNamespace($xml)
    {
        return preg_replace('/(<ead.*?)xmlns="[^"]*"\s+(.*?>)/', '${1}${2}', $xml, 1);
    }
    // jjp SITA
    public function setRepositoryWithCodes($repositoryName, $unitid, $countrycode, $repositorycode, $addressValues)
    {
        // ignore if repository URL instead of name is being passed
        if (strtolower(substr($repositoryName, 0, 4)) !== 'http') {
            // see if Repository record already exists, if so link to it
            $this->repository = QubitRepository::getByIdentifier($repositorycode);
            if (!isset($this->repository)) {
                // if the repository does not already exist, create a new Repository and link to it
                $this->repository = new QubitRepository;
                $this->repository->setAuthorizedFormOfName($repositoryName);
                $this->repository->identifier = $repositorycode;
                $this->repository->save();
                // jjp SITA 06 Jan 2015 - Add contact info
                QubitXmlImport::addUpdateContact($this->repository->id, $addressValues);
            }
            return $this->repository->id;
        }
        return;
    }
    //string $c is the string of characters to use.
    //integer $l is how long you want the string to be.
    //boolean $u is whether or not a character can appear beside itself.
    function rand_chars($l, $u = FALSE)
    {
        $c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        if (!$u) {
            for ($s = '', $i = 0, $z = strlen($c) - 1; $i < $l; $x = rand(0, $z), $s.= $c{$x}, $i++);
        } else {
            for ($i = 0, $z = strlen($c) - 1, $s = $c{rand(0, $z) }, $i = 1; $i != $l; $x = rand(0, $z), $s.= $c{$x}, $s = ($s{$i} == $s{$i - 1} ? substr($s, 0, -1) : $s), $i = strlen($s));
        }
        return $s;
    }
    
    private function insertRecord(&$title, &$creatorName, &$corpName, &$repositoryName, &$batch, &$partno, &$volno, &$refno, &$sysno, &$rackno, &$recordtype, &$unitid, &$repositoryCountryCode, &$repositoryCode, &$dates, &$note, &$source, &$registry, &$registryIdentifier, &$uniquenumber, $conn, $csvfile)
    {
        //################## Setting Global variables
        $repo_identifier = $repositoryCode;
        if ($repo_identifier == "HER") {
            $repo_auth_form_of_name = "Bureau of Heraldry on registered heraldic representations";
        } else if ($repo_identifier == "GEN") {
            $repo_auth_form_of_name = "South African Genealogical Society on Gravestones";
        } else if ($repo_identifier == "KAB") {
            $repo_auth_form_of_name = "Cape Town Archives Repository";
        } else if ($repo_identifier == "MAN") {
            $repo_auth_form_of_name = "National Registers of Manuscripts and Photographs (NAREM and NAREF) National Archives' cartographic and library material, microfilms and copies";
        } else if ($repo_identifier == "NFA") {
            $repo_auth_form_of_name = "National Film, Video and Sound Archives";
        } else if ($repo_identifier == "NAB") {
            $repo_auth_form_of_name = "Pietermaritzburg Archives Repository";
        } else if ($repo_identifier == "OVM") {
            $repo_auth_form_of_name = "National Register of Audio-Visual Material";
        } else if ($repo_identifier == "ROS") {
            $repo_auth_form_of_name = "National Register of Oral Sources";
        } else if ($repo_identifier == "RSA") {
            $repo_auth_form_of_name = "All Archives Repositories and National Registers of non-public records";
        } else if ($repo_identifier == "SAB") {
            $repo_auth_form_of_name = "National Archives Repository (Public Records of Central Government since 1910)";
        } else if ($repo_identifier == "TAB") {
            $repo_auth_form_of_name = "National Archives Repository (Public Records of former Transvaal Province and its predecessors as well as of magistrates and local authorities)";
        } else if ($repo_identifier == "TBD") {
            $repo_auth_form_of_name = "Durban Archives Repository";
        } else if ($repo_identifier == "TBE") {
            $repo_auth_form_of_name = "Port Elizabeth Archives Repository";
        } else if ($repo_identifier == "TBK") {
            $repo_auth_form_of_name = "Cape Town Records Centre";
        } else if ($repo_identifier == "VAB") {
            $repo_auth_form_of_name = "Free State Archives Repository";
        } else if ($repo_identifier == "KAD") {
            $repo_auth_form_of_name = "KAD";
        } else if ($repo_identifier == "SAB") {
            $repo_auth_form_of_name = "National Archives Repository (Public Records of Central Government since 1910)";
        } else if ($repo_identifier == "NAR") {
            $repo_auth_form_of_name = "National Registers of Manuscripts and Photographs (NAREM and NAREF) National Archives cartographic and library material, microfilms and copies";
        
} else if ($repo_identifier == "APS001") { $repo_auth_form_of_name = "Alan Paton Centre & Struggle Archives, University of KwaZulu-Natal, Pietermaritzburg";
} else if ($repo_identifier == "APC001") { $repo_auth_form_of_name = "Alan Paton Centre and Archives, University of Natal, Pietermaritzburg";
} else if ($repo_identifier == "ALB001") { $repo_auth_form_of_name = "Albany Museum (1820)";
} else if ($repo_identifier == "ARA001") { $repo_auth_form_of_name = "AR";
} else if ($repo_identifier == "ARM001") { $repo_auth_form_of_name = "Army Museums Ogilby Trust, London";
} else if ($repo_identifier == "BAD001") { $repo_auth_form_of_name = "Baden Powell House, London";
} else if ($repo_identifier == "BAR001") { $repo_auth_form_of_name = "Barlow Rand";
} else if ($repo_identifier == "BER001") { $repo_auth_form_of_name = "Berkshire Record Office. (Reading)";
} else if ($repo_identifier == "BOD001") { $repo_auth_form_of_name = "Bodleian Library. (Oxford)";
} else if ($repo_identifier == "BRE001") { $repo_auth_form_of_name = "Brenthurst Library, Johannesburg";
} else if ($repo_identifier == "BRI001") { $repo_auth_form_of_name = "British Library of Political and Economic Science, London";
} else if ($repo_identifier == "BMN001") { $repo_auth_form_of_name = "British Museum, (Natural History), London";
} else if ($repo_identifier == "BML001") { $repo_auth_form_of_name = "British Museum, London";
} else if ($repo_identifier == "BUC001") { $repo_auth_form_of_name = "Buckinghamshire Record Office (Aylesbury)";
} else if ($repo_identifier == "HER") { $repo_auth_form_of_name = "Bureau of Heraldry on registered heraldic representations";
} else if ($repo_identifier == "BUR001") { $repo_auth_form_of_name = "Bury St. Edmunds and West Suffolk Record Office";
} else if ($repo_identifier == "CAD001") { $repo_auth_form_of_name = "CAD";
} else if ($repo_identifier == "CAM001") { $repo_auth_form_of_name = "Cambridgeshire Record Office (Cambridge)";
} else if ($repo_identifier == "KAB") { $repo_auth_form_of_name = "Cape Town Archives Repository";
} else if ($repo_identifier == "TBK") { $repo_auth_form_of_name = "Cape Town Records Centre";
} else if ($repo_identifier == "CAR001") { $repo_auth_form_of_name = "Carnegie-biblioteek, U";
} else if ($repo_identifier == "CEN001") { $repo_auth_form_of_name = "Central Library. (Newcastle Upon Tyne)";
} else if ($repo_identifier == "CLS001") { $repo_auth_form_of_name = "Central Library. (Sheffield)";
} else if ($repo_identifier == "CLW001") { $repo_auth_form_of_name = "Central Library. (Wigan)";
} else if ($repo_identifier == "CHU001") { $repo_auth_form_of_name = "Church Missionary Society";
} else if ($repo_identifier == "COS001") { $repo_auth_form_of_name = "Church of Scotland Foreign Mission Committee. (Edinburgh)";
} else if ($repo_identifier == "CLE001") { $repo_auth_form_of_name = "City Library (Exeter)";
} else if ($repo_identifier == "CLL001") { $repo_auth_form_of_name = "City of Liverpool Public Libraries";
} else if ($repo_identifier == "CPL001") { $repo_auth_form_of_name = "City of Plymouth Public Libraries";
} else if ($repo_identifier == "COM001") { $repo_auth_form_of_name = "Commonwealth Office Library";
} else if ($repo_identifier == "CON001") { $repo_auth_form_of_name = "Conference of Missionary Societies in Great Britain and Ireland";
} else if ($repo_identifier == "COR001") { $repo_auth_form_of_name = "Cory Library for Historical Research";
} else if ($repo_identifier == "CRB001") { $repo_auth_form_of_name = "County Record Office (Bedford)";
} else if ($repo_identifier == "CRC001") { $repo_auth_form_of_name = "County Record Office (Chichester)";
} else if ($repo_identifier == "CRD001") { $repo_auth_form_of_name = "County Record Office (Dorchester)";
} else if ($repo_identifier == "CRT001") { $repo_auth_form_of_name = "County Record Office. (Truro)";
} else if ($repo_identifier == "CPN001") { $repo_auth_form_of_name = "CP Nel-museum";
} else if ($repo_identifier == "CTL001") { $repo_auth_form_of_name = "CT Libraries";
} else if ($repo_identifier == "DEV001") { $repo_auth_form_of_name = "Devon Record Office";
} else if ($repo_identifier == "DWL001") { $repo_auth_form_of_name = "Dr. William's Library";
} else if ($repo_identifier == "DRO001") { $repo_auth_form_of_name = "Drostdy-museum";
} else if ($repo_identifier == "TBD") { $repo_auth_form_of_name = "Durban Archives Repository";
} else if ($repo_identifier == "EAS001") { $repo_auth_form_of_name = "East Riding of Yorkshire County Record Office (Beverley)";
} else if ($repo_identifier == "EDI001") { $repo_auth_form_of_name = "Edinburgh University Library";
} else if ($repo_identifier == "ERO001") { $repo_auth_form_of_name = "Essex Record Office (Chelmsford)";
} else if ($repo_identifier == "FIT001") { $repo_auth_form_of_name = "Fitzwilliam Museum (Cambridge)";
} else if ($repo_identifier == "VAB") { $repo_auth_form_of_name = "Free State Archives Repository";
} else if ($repo_identifier == "GLO001") { $repo_auth_form_of_name = "Gloucestershire Records Office";
} else if ($repo_identifier == "GRA001") { $repo_auth_form_of_name = "Grahamstown";
} else if ($repo_identifier == "LRE001") { $repo_auth_form_of_name = "Greater London Record Office";
} else if ($repo_identifier == "GLM001") { $repo_auth_form_of_name = "Greater London Record Office (Middlesex Records)";
} else if ($repo_identifier == "HCL001") { $repo_auth_form_of_name = "Hereford City Library, Museum, Art Galler, and Old House";
} else if ($repo_identifier == "HCR001") { $repo_auth_form_of_name = "Hereford County Record Office";
} else if ($repo_identifier == "HTC001") { $repo_auth_form_of_name = "Hertfordshire County Record Office";
} else if ($repo_identifier == "HOP001") { $repo_auth_form_of_name = "Hope Department of Zoology (Entomology)";
} else if ($repo_identifier == "HOU001") { $repo_auth_form_of_name = "House of Lords Record Office";
} else if ($repo_identifier == "HOV001") { $repo_auth_form_of_name = "Hove Central Library";
} else if ($repo_identifier == "HOW001") { $repo_auth_form_of_name = "Howick Museum";
} else if ($repo_identifier == "HUG001") { $repo_auth_form_of_name = "Hugenote-Gedenkmuseum, Franschhoek";
} else if ($repo_identifier == "HUN001") { $repo_auth_form_of_name = "Huntingdonshire County Record Office";
} else if ($repo_identifier == "IMP001") { $repo_auth_form_of_name = "Imperial War Museum";
} else if ($repo_identifier == "IOE001") { $repo_auth_form_of_name = "India Office Library, European Manuscripts Section";
} else if ($repo_identifier == "IND001") { $repo_auth_form_of_name = "India Office Records";
} else if ($repo_identifier == "INE001") { $repo_auth_form_of_name = "INEG";
} else if ($repo_identifier == "INB001") { $repo_auth_form_of_name = "INEG Bloemfontein";
} else if ($repo_identifier == "INS001") { $repo_auth_form_of_name = "Institution of Royal Engineers (Chatham)";
} else if ($repo_identifier == "IPS001") { $repo_auth_form_of_name = "Ipswich and East Suffolk Record Office";
} else if ($repo_identifier == "IRI001") { $repo_auth_form_of_name = "Irish Manuscripts Commission and National Library of Ireland";
} else if ($repo_identifier == "JLB001") { $repo_auth_form_of_name = "JLB Smith Inst. of Ichthyology, Grahamstown";
} else if ($repo_identifier == "JOH001") { $repo_auth_form_of_name = "Johannesburg Public Library";
} else if ($repo_identifier == "JSG001") { $repo_auth_form_of_name = "JS Gericke-biblioteek, US";
} else if ($repo_identifier == "KEN001") { $repo_auth_form_of_name = "Kent Archives Office. (Maidstone)";
} else if ($repo_identifier == "KIM001") { $repo_auth_form_of_name = "Kimberley Africana Library";
} else if ($repo_identifier == "KPL001") { $repo_auth_form_of_name = "Kimberley Public Library";
} else if ($repo_identifier == "KLE001") { $repo_auth_form_of_name = "Klerksdorpse Museum";
} else if ($repo_identifier == "LAM001") { $repo_auth_form_of_name = "Lambeth Palace Library";
} else if ($repo_identifier == "LAN001") { $repo_auth_form_of_name = "Lancashire Record Office. (Preston)";
} else if ($repo_identifier == "LIB001") { $repo_auth_form_of_name = "Library of the Society of Friends";
} else if ($repo_identifier == "LIN001") { $repo_auth_form_of_name = "Lincolnshire Archives Committee";
} else if ($repo_identifier == "LLR001") { $repo_auth_form_of_name = "Lindley Library, Royal Horticultural Society";
} else if ($repo_identifier == "LIV001") { $repo_auth_form_of_name = "Liverpool Chamber of Commerce";
} else if ($repo_identifier == "LST001") { $repo_auth_form_of_name = "Liverpool School of Tropical Medicine";
} else if ($repo_identifier == "LON001") { $repo_auth_form_of_name = "London Library";
} else if ($repo_identifier == "LMS001") { $repo_auth_form_of_name = "London Missionary Society";
} else if ($repo_identifier == "LSH001") { $repo_auth_form_of_name = "London School of Hygiene and Tropical Medicine";
} else if ($repo_identifier == "MCG001") { $repo_auth_form_of_name = "McGregor Museum, Kimberley";
} else if ($repo_identifier == "MET001") { $repo_auth_form_of_name = "Methodist Missionary Society";
} else if ($repo_identifier == "MIN001") { $repo_auth_form_of_name = "Ministry of Defence Naval Library";
} else if ($repo_identifier == "MUN001") { $repo_auth_form_of_name = "Municipal Library. (Warrington)";
} else if ($repo_identifier == "NAL001") { $repo_auth_form_of_name = "NALN";
} else if ($repo_identifier == "NAZ001") { $repo_auth_form_of_name = "National Archives of Zimbabwe";
} else if ($repo_identifier == "SAB") { $repo_auth_form_of_name = "National Archives Repository (Public Records of Central Government since 1910)";
} else if ($repo_identifier == "TAB") { $repo_auth_form_of_name = "National Archives Repository (Public Records of former Transvaal Province and its predecessors as well as of magistrates and local authorities)";
} else if ($repo_identifier == "NAM001") { $repo_auth_form_of_name = "National Army Museum (Camberley)";
} else if ($repo_identifier == "NBS001") { $repo_auth_form_of_name = "National Bible Society of Scotland";
} else if ($repo_identifier == "NFV001") { $repo_auth_form_of_name = "National Film, Video and Sound Archives";
} else if ($repo_identifier == "NLI001") { $repo_auth_form_of_name = "National Library of Ireland. (Dublin)";
} else if ($repo_identifier == "NLS001") { $repo_auth_form_of_name = "National Library of Scotland";
} else if ($repo_identifier == "NLW001") { $repo_auth_form_of_name = "National Library of Wales. (Aberystwyth)";
} else if ($repo_identifier == "NMM001") { $repo_auth_form_of_name = "National Maritime Museum";
} else if ($repo_identifier == "OVM") { $repo_auth_form_of_name = "National Register of Audio-Visual Material";
} else if ($repo_identifier == "ROS") { $repo_auth_form_of_name = "National Register of Oral Sources";
} else if ($repo_identifier == "MAN") { $repo_auth_form_of_name = "National Registers of Manuscripts and Photographs (NAREM and NAREF) National Archives' cartographic and library material, microfilms and copies";
} else if ($repo_identifier == "NED001") { $repo_auth_form_of_name = "NEDC Grahamstown";
} else if ($repo_identifier == "NHK001") { $repo_auth_form_of_name = "Nederduitsch Hervormde Kerk van Afrika";
} else if ($repo_identifier == "NEL001") { $repo_auth_form_of_name = "NELM Grahamstown";
} else if ($repo_identifier == "NRO001") { $repo_auth_form_of_name = "Northamptonshire Record Office (Northampton)";
} else if ($repo_identifier == "NOT001") { $repo_auth_form_of_name = "Nottinghamshire Record Office";
} else if ($repo_identifier == "OOR001") { $repo_auth_form_of_name = "Oorlogsmuseum van die Boererepublieke";
} else if ($repo_identifier == "OSC001") { $repo_auth_form_of_name = "Oscott College. (Sutton Coldfield)";
} else if ($repo_identifier == "PPC001") { $repo_auth_form_of_name = "Papers not yet Reported, in private custody";
} else if ($repo_identifier == "PHM001") { $repo_auth_form_of_name = "Papers Reported by the Historical Manuscripts Commission (National Register of Archives)";
} else if ($repo_identifier == "PNR001") { $repo_auth_form_of_name = "Papers Reported by the National Register of Archives (Scotland)";
} else if ($repo_identifier == "PEP001") { $repo_auth_form_of_name = "Pepysian Library, Magdalene College. (Cambridge)";
} else if ($repo_identifier == "NAB") { $repo_auth_form_of_name = "Pietermaritzburg Archives Repository";
} else if ($repo_identifier == "PIT001") { $repo_auth_form_of_name = "Pitt Rivers Museum";
} else if ($repo_identifier == "TBE") { $repo_auth_form_of_name = "Port Elizabeth Archives Repository";
} else if ($repo_identifier == "PAZ001") { $repo_auth_form_of_name = "Public Archives of Zimbabwe";
} else if ($repo_identifier == "PLB001") { $repo_auth_form_of_name = "Public Libraries (Birmingham)";
} else if ($repo_identifier == "PLT001") { $repo_auth_form_of_name = "Public Library (Brighton)";
} else if ($repo_identifier == "PNI001") { $repo_auth_form_of_name = "Public Record Office Of Northern Ireland";
} else if ($repo_identifier == "PNB001") { $repo_auth_form_of_name = "Public Record Office of Northern Ireland. (Belfast)";
} else if ($repo_identifier == "QUE001") { $repo_auth_form_of_name = "Queen's Own Royal West Kent Regimental Museum";
} else if ($repo_identifier == "RAU001") { $repo_auth_form_of_name = "RAU";
} else if ($repo_identifier == "RAC001") { $repo_auth_form_of_name = "Regimental Association, the Duke of Cornwall's Light Infantry (Bodmin";
} else if ($repo_identifier == "RDA001") { $repo_auth_form_of_name = "Regimental Depot the Argyll and Sutherland Highlanders. (Stirling)";
} else if ($repo_identifier == "RHG001") { $repo_auth_form_of_name = "Regimental Headquarters, the Gloucestershire Regiment";
} else if ($repo_identifier == "RHL001") { $repo_auth_form_of_name = "Regimental Headquarters, the Lancashire Regiment (Prince of Wales's Volunteers). (Preston)";
} else if ($repo_identifier == "RHR001") { $repo_auth_form_of_name = "Regimental Headquarters, the Loyal Regiment (North Lancashire). (Preston)";
} else if ($repo_identifier == "RHM001") { $repo_auth_form_of_name = "Regimental Headquarters, the Middlesex Regiment (Duke of Cambridge's Own) (Edgware)";
} else if ($repo_identifier == "RHF001") { $repo_auth_form_of_name = "Regimental Headquarters, the Royal Highland Fusiliers";
} else if ($repo_identifier == "RHS001") { $repo_auth_form_of_name = "Regimental Headquarters, the Sherwood Foresters";
} else if ($repo_identifier == "RHW001") { $repo_auth_form_of_name = "Regimental Headquarters, the Welch Regiment. (Cardiff)";
} else if ($repo_identifier == "REC001") { $repo_auth_form_of_name = "Registrar of Companies for Scotland";
} else if ($repo_identifier == "RHO001") { $repo_auth_form_of_name = "Rhodes House Library";
} else if ($repo_identifier == "RCE001") { $repo_auth_form_of_name = "Royal College of Surgeons of England";
} else if ($repo_identifier == "RCS001") { $repo_auth_form_of_name = "Royal Commonwealth Society";
} else if ($repo_identifier == "RGS001") { $repo_auth_form_of_name = "Royal Geographical Society";
} else if ($repo_identifier == "RII001") { $repo_auth_form_of_name = "Royal Institute of International Affairs";
} else if ($repo_identifier == "RIC001") { $repo_auth_form_of_name = "Royal Institution of Cornwall";
} else if ($repo_identifier == "RMC001") { $repo_auth_form_of_name = "Royal Marines Corps Museum (Eastney)";
} else if ($repo_identifier == "RSM001") { $repo_auth_form_of_name = "Royal Signals Museum (Catterick)";
} else if ($repo_identifier == "RST001") { $repo_auth_form_of_name = "Royal Society of Tropical Medicine and Hygiene";
} else if ($repo_identifier == "SOA001") { $repo_auth_form_of_name = "School of Oriental and African Studies";
} else if ($repo_identifier == "SOS001") { $repo_auth_form_of_name = "School of Oriental Studies";
} else if ($repo_identifier == "SCO001") { $repo_auth_form_of_name = "Scottish Record Office";
} else if ($repo_identifier == "SEA001") { $repo_auth_form_of_name = "Seaforth and Camerons Regimental Museum. (Inverness)";
} else if ($repo_identifier == "SEL001") { $repo_auth_form_of_name = "Selly Oak Colleges Library (Burmingham)";
} else if ($repo_identifier == "SOM001") { $repo_auth_form_of_name = "Somerset Light Infantry Regimental Museum";
} else if ($repo_identifier == "GEN") { $repo_auth_form_of_name = "South African Genealogical Society on Gravestones";
} else if ($repo_identifier == "SGM001") { $repo_auth_form_of_name = "South African General Mission - Africa Evangelical Fellowship";
} else if ($repo_identifier == "SHA001") { $repo_auth_form_of_name = "South African History Archive (SAHA)";
} else if ($repo_identifier == "SII001") { $repo_auth_form_of_name = "South African Institute of International Affairs";
} else if ($repo_identifier == "SAL001") { $repo_auth_form_of_name = "South African Library, Cape Town";
} else if ($repo_identifier == "SNG001") { $repo_auth_form_of_name = "South African National Gallery";
} else if ($repo_identifier == "SMM001") { $repo_auth_form_of_name = "South African National Museum of Military History";
} else if ($repo_identifier == "STA001") { $repo_auth_form_of_name = "Staffordshire Record Office";
} else if ($repo_identifier == "SUD001") { $repo_auth_form_of_name = "Sudan United Mission. (Sidcup)";
} else if ($repo_identifier == "SWA001") { $repo_auth_form_of_name = "SWA";
} else if ($repo_identifier == "AON001") { $repo_auth_form_of_name = "The Area Office, The National Trust, Hughenden Manor";
} else if ($repo_identifier == "BHR001") { $repo_auth_form_of_name = "The Bedfordshire and Hertfordshire Regiment Association";
} else if ($repo_identifier == "CRM001") { $repo_auth_form_of_name = "The Cameronians Regimental Museum. (Lanark)";
} else if ($repo_identifier == "DML001") { $repo_auth_form_of_name = "The Department of Manuscripts, the Library, University of Nottingham";
} else if ($repo_identifier == "EEC001") { $repo_auth_form_of_name = "The English Electric Company Limited, Vulcan Works (Newton-Le-Willows)";
} else if ($repo_identifier == "ERA001") { $repo_auth_form_of_name = "The Essex Regiment Association (Brentwood)";
} else if ($repo_identifier == "GRE001") { $repo_auth_form_of_name = "The Green Howards Regimental Museum. (Richmond)";
} else if ($repo_identifier == "JRL001") { $repo_auth_form_of_name = "The John Rylands Library. (Manchester)";
} else if ($repo_identifier == "KOR001") { $repo_auth_form_of_name = "The King's own Royal Border Regiment (Carlisle)";
} else if ($repo_identifier == "KOS001") { $repo_auth_form_of_name = "The King's Own Scottish Borderers Regimental Museum (Berwick-Upon-Tweed)";
} else if ($repo_identifier == "LBC001") { $repo_auth_form_of_name = "The Library, Balliol College";
} else if ($repo_identifier == "LCC001") { $repo_auth_form_of_name = " The Library, Christ Church. (Oxford)";
} else if ($repo_identifier == "LHC001") { $repo_auth_form_of_name = " The Library, H.M. Customs and Excise";
} else if ($repo_identifier == "LNC001") { $repo_auth_form_of_name = " The Library, New College. (Edinburgh)";
} else if ($repo_identifier == "LSC001") { $repo_auth_form_of_name = " The Library, Somerville College";
} else if ($repo_identifier == "LTC001") { $repo_auth_form_of_name = " The Library, Trinity College. (Dublin)";
} else if ($repo_identifier == "LUB001") { $repo_auth_form_of_name = " The Library, University of Birmingham (Birmingham)";
} else if ($repo_identifier == "MPL001") { $repo_auth_form_of_name = "The Manchester Public Libraries, Central Library";
} else if ($repo_identifier == "MMU001") { $repo_auth_form_of_name = "The Manx Museum. (Isle of Man)";
} else if ($repo_identifier == "MOR001") { $repo_auth_form_of_name = "The Moravian Church in Great Britain and Ireland";
} else if ($repo_identifier == "NRM001") { $repo_auth_form_of_name = "The Northamptonshire Regiment Museum";
} else if ($repo_identifier == "POS001") { $repo_auth_form_of_name = "The Post Office";
} else if ($repo_identifier == "PRO001") { $repo_auth_form_of_name = "The Public Record Office";
} else if ($repo_identifier == "PRC001") { $repo_auth_form_of_name = "The Public Record Office. Colonial Office";
} else if ($repo_identifier == "PRR001") { $repo_auth_form_of_name = "The Public Record Office. Commonwealth Relations Office";
} else if ($repo_identifier == "PRF001") { $repo_auth_form_of_name = "The Public Record Office. Foreign Office";
} else if ($repo_identifier == "PRH001") { $repo_auth_form_of_name = "The Public Record Office. Home Office";
} else if ($repo_identifier == "PRT001") { $repo_auth_form_of_name = "The Public Record Office. Treasury";
} else if ($repo_identifier == "PRW001") { $repo_auth_form_of_name = "The Public Record Office. War Office";
} else if ($repo_identifier == "RBG001") { $repo_auth_form_of_name = "The Royal Botanic Gardens, Kew";
} else if ($repo_identifier == "RLR001") { $repo_auth_form_of_name = "The Royal Lincolnshire Regiment Museum";
} else if ($repo_identifier == "RNR001") { $repo_auth_form_of_name = "The Royal Norfolk Regiment Association (Norwich)";
} else if ($repo_identifier == "RSO001") { $repo_auth_form_of_name = "The Royal Society";
} else if ($repo_identifier == "SNM001") { $repo_auth_form_of_name = "The Scottish National Memorial to David Livingstone Trust. (Blantyre)";
} else if ($repo_identifier == "SPC001") { $repo_auth_form_of_name = "The Society for Promoting Christian Knowledge";
} else if ($repo_identifier == "SLR001") { $repo_auth_form_of_name = "The South Lancashire Regiment (The Prince of Wales's Volunteers)";
} else if ($repo_identifier == "SAJ001") { $repo_auth_form_of_name = "The Star Archives, Johannesburg";
} else if ($repo_identifier == "WHM001") { $repo_auth_form_of_name = "The Wellcome Historical Medical Library";
} else if ($repo_identifier == "YLR001") { $repo_auth_form_of_name = "The York & Lancaster Regiment";
} else if ($repo_identifier == "UCT001") { $repo_auth_form_of_name = "UCT Libraries";
} else if ($repo_identifier == "UNI001") { $repo_auth_form_of_name = "Unisa";
} else if ($repo_identifier == "USP001") { $repo_auth_form_of_name = "United Society for the Propagation of the Gospel";
} else if ($repo_identifier == "UPR001") { $repo_auth_form_of_name = "Universiteit van Pretoria";
} else if ($repo_identifier == "ULC001") { $repo_auth_form_of_name = "University Library (Cambridge)";
} else if ($repo_identifier == "ULS001") { $repo_auth_form_of_name = "University Library. St.Andrews";
} else if ($repo_identifier == "ULL001") { $repo_auth_form_of_name = "University of London Library";
} else if ($repo_identifier == "WAR001") { $repo_auth_form_of_name = "Warwick County Record Office";
} else if ($repo_identifier == "WIL001") { $repo_auth_form_of_name = "William Salt Library. (Stafford)";
} else if ($repo_identifier == "WLT001") { $repo_auth_form_of_name = "Wiltshire Record Office. (Trowbridge)";
} else if ($repo_identifier == "WTS001") { $repo_auth_form_of_name = "Wiltshire Regiment Museum, Regimental Headquarters (Devizes Branch) Duke of Edinburgh's Royal Regiment (Berkshire and Wiltshire) (Devizes)";
} else if ($repo_identifier == "WIT001") { $repo_auth_form_of_name = "Wits University Library";
} else if ($repo_identifier == "WOR001") { $repo_auth_form_of_name = "Worcester-Museum";
} else if ($repo_identifier == "WRO001") { $repo_auth_form_of_name = "Worcestershire Record Office";
} else if ($repo_identifier == "WRM001") { $repo_auth_form_of_name = "Worcestershire Regiment Museum";
}
else
{
	if ($repo_auth_form_of_name == "") 
	{ 
		$repo_auth_form_of_name = $repo_identifier;
	}
}
        
        $actor_auth_form_of_name = $creatorName;
        $creator = $actor_auth_form_of_name;
        $corpname = $actor_auth_form_of_name;
        $information_object_title = $title;
        $filePath = "";
        $information_object_description = $note[0];
        $information_object_remark = $note[1];
        $information_object_extent = $recordtype;
        $information_object_record_type = $recordtype;
        $information_object_source = $source;
        $information_object_reference_number = $refno;
        $information_object_volume_number = $volno;
        $information_object_part_number = $partno;
        $information_object_system_number = $sysno;
        $information_object_rack_number = $rackno;

        //$information_object_source = "";
        //$information_object_reference_number = "";
        //$information_object_volume_number = "";
        //$information_object_part_number = "";
        //$information_object_system_number = "";
        //$information_object_rack_number = "";

        $information_object_identifier = $unitid;
        $unitid = $repo_identifier . "_" . $uniquenumber;
        
        $pos = strpos($dates, " - ");
        
        if ($pos === false) {
            $event_start_date = "";
            $event_end_date = "";
        } else {
            $event_start_date = substr($this->dates, 0, $pos);
			if ($event_start_date === "0000") {
				$event_start_date = "";
			}
			$event_end_date = substr($this->dates, $pos + 3);
			if ($event_end_date === "0000") {
				$event_end_date = "";
			}
        }
        $event_date_range = $dates;
        if (isset($note[0])) {
            $note0 = $note[0];
        } else {
            $note0 = "";
        }
        if (isset($note[1])) {
            $note1 = $note[1];
        } else {
            $note1 = "";
        }
        date_default_timezone_set('Africa/Johannesburg');
        $date = new DateTime();
        $dateOnly = $date->format('Y-m-d');
        $date = $date->format('Y-m-d H:i:s');
        
        $levelOfDetailID = 1112;
        //get LEVEL_OF_DESCRIPTION_ID = 1120
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='Item' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $levelOfDescriptID = $row["ID"];
        }
        }
        else
        {
        print "0 results-levelOfDescriptID". "\n";
        }
        */
        $levelOfDescriptID = 1120;
        //get COLLECTION_TYPE_ID = 128
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='Archival material' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $collectionTypeID = $row["ID"];
        }
        }
        else
        {
        print "0 results-collectionTypeID". "\n";
        }
        */
        $collectionTypeID = 128;
        //get publication_ID = 158
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='publication' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $publicationID = $row["ID"];
        }
        }
        else
        {
        print "0 results-publicationID". "\n";
        }
        */
        $publicationID = 158;
        //get STATUS_ID = 159
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='Draft' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $statusID = $row["ID"];
        }
        }
        else
        {
        print "0 results-statusID". "";
        }
        */
        $statusID = 159;
        //get event creation = 111
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='Creation' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $creationID = $row["ID"];
        }
        }
        else
        {
        print "0 results-creationID". "";
        }
        */
        $creationID = 111;
        //get REFUSAL_ID = 1234
        $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE `name`='Yes' and `culture`='en' LIMIT 1");
        $q->execute();
        $row = $q->fetch(PDO::FETCH_ASSOC);
        if (!empty($row)) {
            $refusalID = $row["ID"];
        } else {
            print "0 results-refusalID" . "";
        }
        $refusalID = 1232;
        //get SENSITIVITY_ID = 1234
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='None' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $sensitivityID = $row["ID"];
        }
        }
        else
        {
        print "0 results-sensitivityID". "";
        }
        */
        $sensitivityID = 203;
        //get PUBLISH_ID = 203
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='No' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $publishID = $row["ID"];
        }
        }
        else
        {
        print "0 results-publishID". "";
        }
        */
        $publishID = 1240;
        //get CLASSIFICATION_ID = 1243
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='Yes' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $classificationID = $row["ID"];
        }
        }
        else
        {
        print "0 results-classificationID". "";
        }
        */
        $classificationID = 1201;
        //get RESTRICTION_ID = 1203
        /*	$sql = "SELECT ID FROM `term_i18n` WHERE `name`='Public' and `culture`='en'";
        $result = $conn->query($sql);
        
        if ($result->num_rows > 0)
        {
        while($row = $result->fetch_assoc())
        {
        $restrictionID = $row["ID"];
        }
        }
        else
        {
        print "0 results-restrictionID". "";
        }
        */
        $restrictionID = 1246;
        //######################## Add/Get Repository type 6

        $q = $conn->prepare("SELECT repository.ID FROM `repository` WHERE repository.IDENTIFIER=?");
        $q->bindValue(1, $repo_identifier, PDO::PARAM_STR);
        //$sth->bindValue(2, $calories, PDO::PARAM_INT);
        //$sth->bindValue(3, $colour, PDO::PARAM_STR);
        $q->execute();
        $row = $q->fetch(PDO::FETCH_ASSOC);
         if (!empty($row)) {
            //print "Repository exist ID: " . $row["ID"]. "\n";
            $repoID = $row["ID"];
            $q->closeCursor();
            $q = null;
        } else {
            try {
                $statement = $conn->prepare("INSERT INTO object (`CLASS_NAME`,`CREATED_AT`,`UPDATED_AT`) VALUES(?,?,?)");
                $statement->execute(array('QubitRepository', $date, $date));
                $statement->closeCursor();
                $statement = null;
                //print "New 'object' record created successfully - 1". "\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error: " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            $slugTitle = "";
            //Get from object new inserted object.ID
            $q = $conn->prepare("SELECT max(ID) as maxObjectID FROM `object`");
            $q->execute();
            $row = $q->fetch(PDO::FETCH_ASSOC);
            if (!empty($row)) {
                //print "Repository ID.1: " . $row["maxObjectID"]. "\n";
                $repoID = $row["maxObjectID"];
                $q->closeCursor();
                $q = null;
            } else {
                print "Fail max(object.ID).1" . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //Get from actor LFT and RGT
            $q = $conn->prepare("SELECT actor.RGT FROM `actor` WHERE actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL LIMIT 1");
            $q->execute();
            $row = $q->fetch(PDO::FETCH_ASSOC);
            if (!empty($row)) {
                //print "actor.RGT: " . $row["RGT"]. "\n";
                $RGT = $row["RGT"] - 1;
                $LFT = $row["RGT"] - 2;
                $q->closeCursor();
                $q = null;
            } else {
                print "Fail LFT and RGT for actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL" . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //print $RGT. "\n";
            //PARENT_ID=6 --always
            //SOURCE_CULTURE = en -- always
            try {
                $statement = $conn->prepare("INSERT INTO actor (`ID`,`PARENT_ID`,`LFT`,`RGT`,`SOURCE_CULTURE`) VALUES(?,?,?,?,?)");
                $statement->execute(array($repoID, 6, $LFT, $RGT, 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'actor' record created successfully - ". "\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error: " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //update LFT and RGT for actor.ID = 6 to new values
            $RGT = $RGT + 2;
            try {
                $statement = $conn->prepare("UPDATE actor SET RGT=RGT+2 WHERE ID = 6");
                $statement->execute(array(''));
                $statement->closeCursor();
                $statement = null;
                //print "Repository Actor RGT updated successfully". "\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error updating - Repository Actor RGT- record: " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //update LFT and RGT for actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL   to new values
            $RGT = $RGT + 2;
            try {
                $statement = $conn->prepare("UPDATE actor SET RGT=RGT+2, LFT=LFT+2 WHERE actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL");
                $statement->execute(array(''));
                $statement->closeCursor();
                $statement = null;
                //print "Repository Actor updated successfully". "\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error updating - Repository Actor RGT- record: " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //SOURCE_CULTURE = en -- always
            try {
                $statement = $conn->prepare("INSERT INTO actor_i18n (`AUTHORIZED_FORM_OF_NAME`,`ID`,`CULTURE`) VALUES(?,?,?)");
                $statement->execute(array($repo_auth_form_of_name, $repoID, 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'actor_i18n' record created successfully - ". "\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'actor_i18n': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //IDENTIFIER = is on top
            try {
                $statement = $conn->prepare("INSERT INTO repository (`ID`,`IDENTIFIER`,`UPLOAD_LIMIT`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                $statement->execute(array($repoID, $repo_identifier, '-1', 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'repository' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'repository': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            try {
                $statement = $conn->prepare("INSERT INTO repository_i18n (`ID`,`CULTURE`) VALUES(?,?)");
                $statement->execute(array($repoID, 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'repository_i18n' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'repository_i18n': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //slug.SLUG = AUTHORIZED_FORM_OF_NAME with - in spaces
            $slugTitle = preg_replace('/[^a-z0-9]/i', '_', $slugTitle);
            $slugTitle = str_replace(' ', '-', strtolower($repo_auth_form_of_name));
            $slugTitle = str_replace(':', '', strtolower($slugTitle));
            $slugTitle = str_replace('.', '', strtolower($slugTitle));
            $slugTitle = str_replace("'", "", strtolower($slugTitle));
            for ($x = 0; $x <= 100; $x++) {            $slugTitle = str_replace(',', '', strtolower($slugTitle));

                $slugTitle = str_replace('--', '-', strtolower($slugTitle));
                $pos = strpos($slugTitle, "--");
                //print $pos. "\n";
                if ($pos == 0) {
                    break;
                }
            }
            $slugTitle = str_replace('(', '', strtolower($slugTitle));
            $slugTitle = str_replace('?', '', strtolower($slugTitle));
            $slugTitle = str_replace(')', '', strtolower($slugTitle));
            $slugTitle = str_replace('/', '', strtolower($slugTitle));
            $slugTitle = str_replace("'", "", strtolower($slugTitle));
            $slugTitle = str_replace('"', '', strtolower($slugTitle));
           //print "slugTitle: ".$slugTitle. "\n";
            if (strlen($slugTitle) > 100) {
                $slugTitle = substr($slugTitle, 0, 100);
            }
            $slugTitleConcat = $slugTitle;
            for ($x = 0; $x <= 10000; $x++) {
                //find next unique slug
                $slugTitleDash = $slugTitle . "-";
                $slugTitleCount = $x + 1;
                $slugTitleConcat = $slugTitleDash . $slugTitleCount;
                $q = $conn->prepare("SELECT slug FROM `slug` WHERE slug=?");
                $q->bindValue(1, $slugTitleConcat, PDO::PARAM_STR);
                $q->execute();
                $row = $q->fetch(PDO::FETCH_ASSOC);
                if (!empty($row)) {
                    $slugTitleDash = $slugTitle . "-";
                    $slugTitleCount = $x + 1;
                    $slugTitleConcat = $slugTitleDash . $slugTitleCount;
                } else {
                    break;
                }
            }
            try {
                $statement = $conn->prepare("INSERT INTO slug (slug.OBJECT_ID, slug.SLUG) VALUES(?,?)");
                $statement->execute(array($repoID, $slugTitleConcat));
                $statement->closeCursor();
                $statement = null;
                //print "New 'slug.1' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'slug.1': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //get TYPE_ID
            $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name='Maintenance note' LIMIT 1");
            $q->execute();
            $row = $q->fetch(PDO::FETCH_ASSOC);
            if (!empty($row)) {
                //print "Maintenance note ID: " . $row["ID"]. "\n";
                $maintID = $row["ID"];
            } else {
                QubitXMLImport::addLog($sql, '', get_class($this), true);
                print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
            }
            //
            try {
                $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SOURCE_CULTURE`) VALUES(?,?,?)");
                $statement->execute(array($repoID, $maintID, 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'note.1' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'note.1': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //Get from note new inserted note.ID
            $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
            $q->execute();
            $row = $q->fetch(PDO::FETCH_ASSOC);
            if (!empty($row)) {
                //print "Note ID: " . $row["maxNoteID"]. "\n";
                $noteID = $row["maxNoteID"];
            } else {
                QubitXMLImport::addLog($sql, '', get_class($this), true);
                print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
            }
            //
            try {
                $statement = $conn->prepare("INSERT INTO note_i18n (`ID`,`CULTURE`) VALUES(?,?)");
                $statement->execute(array($noteID, 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'note_i18n.1' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'note_i18n.1': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //
            try {
                $statement = $conn->prepare("INSERT INTO property (`OBJECT_ID`,`NAME`,`SOURCE_CULTURE`) VALUES(?,?,?)");
                $statement->execute(array($repoID, 'language', 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'property.1' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'property.1': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //Get from property new inserted property.ID
            $q = $conn->prepare("SELECT max(ID) as maxPropertyID FROM `property`");
            $q->execute();
            $row = $q->fetch(PDO::FETCH_ASSOC);
            if (!empty($row)) {
                //print "Property ID: " . $row["maxPropertyID"]. "\n";
                $propertyID = $row["maxPropertyID"];
            } else {
                QubitXMLImport::addLog($sql, '', get_class($this), true);
                print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
            }
            //
            try {
                $statement = $conn->prepare("INSERT INTO property_i18n (`VALUE`,`ID`,`CULTURE`) VALUES(?,?,?)");
                $statement->execute(array('N;', $propertyID, 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'property_i18n.1' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'property_i18n.1': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //
            try {
                $statement = $conn->prepare("INSERT INTO property (`OBJECT_ID`,`NAME`,`SOURCE_CULTURE`) VALUES(?,?,?)");
                $statement->execute(array($repoID, 'script', 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'property.2' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'property.2': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //Get from property new inserted property.ID
            $q = $conn->prepare("SELECT max(ID) as maxPropertyID FROM `property`");
            $q->execute();
            $row = $q->fetch(PDO::FETCH_ASSOC);
            if (!empty($row)) {
                //print "Property ID: " . $row["maxPropertyID"]. "\n";
                $propertyID = $row["maxPropertyID"];
            } else {
                QubitXMLImport::addLog($sql, '', get_class($this), true);
                print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
            }
            //
            try {
                $statement = $conn->prepare("INSERT INTO property_i18n (`VALUE`,`ID`,`CULTURE`) VALUES(?,?,?)");
                $statement->execute(array('N;', $propertyID, 'en'));
                $statement->closeCursor();
                $statement = null;
                //print "New 'property_i18n.2' record created successfully - "."\n";
                
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'property_i18n.2': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
        }

        if ($creatorName != "")
        {
		    $q = $conn->prepare("SELECT actor_i18n.ID FROM `actor_i18n` WHERE actor_i18n.AUTHORIZED_FORM_OF_NAME=? LIMIT 1");
		    $q->bindValue(1, $actor_auth_form_of_name, PDO::PARAM_STR);
		    //$q->bindValue(2, $calories, PDO::PARAM_INT);
		    //$q->bindValue(3, $colour, PDO::PARAM_STR);
		    $q->execute();
		    $row = $q->fetch(PDO::FETCH_ASSOC);
		    if (!empty($row)) {
		        //print "Authority record/Actor type 3 exist ID: " . $row["ID"]. "\n";
		        $actorID = $row["ID"];
		    } else {
		        //print "0 results". "\n";
		        //insert into object table - ID auto increment to use as ID for rest of updates
		        try {
		            $statement = $conn->prepare("INSERT INTO object (`CLASS_NAME`,`CREATED_AT`,`UPDATED_AT`) VALUES(?,?,?)");
		            $statement->execute(array('QubitActor', $date, $date));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'actor object.2' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'actor object.2': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //Get from object new inserted object.ID
		        $q = $conn->prepare("SELECT max(ID) as maxActorID FROM `object`");
		        $q->execute();
		        $row = $q->fetch(PDO::FETCH_ASSOC);
		        if (!empty($row)) {
		            //print "Actor ID: " . $row["maxActorID"]. "\n";
		            $actorID = $row["maxActorID"];
		        } else {
		            QubitXMLImport::addLog($sql, '', get_class($this), true);
		            print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
		        }
		        //print $actorID. "\n";
		        //Get from actor LFT and RGT
		        $q = $conn->prepare("SELECT max(RGT) as MaxRGT FROM `actor` WHERE actor.parent_id=3");
		        $q->execute();
		        $row = $q->fetch(PDO::FETCH_ASSOC);
		        if (!empty($row)) {
		            //print "actor.RGT: " . $row["MaxRGT"]. "\n";
		            if ($row["MaxRGT"] == 0) {
		                $LFT = 2;
		                $RGT = 3;
		            } elseif ($row["MaxRGT"] > 0) {
		                $RGT = $row["MaxRGT"] + 2;
		                $LFT = $RGT - 1;
		            } else {
		                $RGT = $row["MaxRGT"] + 2;
		                $LFT = $RGT - 1;
		            }
		        } else {
		            QubitXMLImport::addLog($sql, '', get_class($this), true);
		            print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
		        }
		        //print $LFT. "\n";
		        //print $RGT. "\n";
		        //PARENT_ID=6 --always
		        //SOURCE_CULTURE = en -- always
		        try {
		            $statement = $conn->prepare("INSERT INTO actor (`ID`,`PARENT_ID`,`LFT`,`RGT`,`SOURCE_CULTURE`) VALUES(?,?,?,?,?)");
		            $statement->execute(array($actorID, 3, $LFT, $RGT, 'en'));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'actor.2' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'actor.2': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //update RGT for actor.ID = 3 to new values
		        try {
		            $statement = $conn->prepare("UPDATE actor SET RGT=RGT+2 WHERE LFT = 1");
		            $statement->execute(array(''));
		            $statement->closeCursor();
		            $statement = null;
		            //print "Actor RGT updated successfully". "\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error updating - Repository Actor RGT- record: " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //update LFT and RGT for actor.ID = 6 to new values
		        try {
		            $statement = $conn->prepare("UPDATE actor SET actor.RGT=actor.RGT + 2, actor.LFT=actor.LFT + 2 WHERE actor.parent_id = 6");
		            $statement->execute(array(''));
		            $statement->closeCursor();
		            $statement = null;
		            //print "Actor updated successfully". "\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error updating - Repository Actor RGT- record: " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //update LFT and RGT for actor.ID = 6   to new values
		        try {
		            $statement = $conn->prepare("UPDATE actor SET actor.RGT=actor.RGT + 2, actor.LFT=actor.LFT + 2 WHERE actor.ID = 6");
		            $statement->execute(array(''));
		            $statement->closeCursor();
		            $statement = null;
		            //print "Actor updated successfully". "\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error updating - updating - Actor - record: " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //update LFT and RGT for actor.ID = 6   to new values
		        try {
		            $statement = $conn->prepare("UPDATE actor SET actor.RGT=actor.RGT + 2, actor.LFT=actor.LFT + 2 WHERE actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL");
		            $statement->execute(array(''));
		            $statement->closeCursor();
		            $statement = null;
		            //print "Actor updated successfully". "\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error updating - updating - Actor - record: " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //SOURCE_CULTURE = en -- always
		        try {
		            $statement = $conn->prepare("INSERT INTO actor_i18n (`AUTHORIZED_FORM_OF_NAME`,`ID`,`CULTURE`) VALUES(?,?,?)");
		            $statement->execute(array($actor_auth_form_of_name, $actorID, 'en'));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'actor_i18n.2' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'actor_i18n.2': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //slug.SLUG = AUTHORIZED_FORM_OF_NAME with - in spaces
		        $slugTitle = preg_replace('/[^a-z0-9]/i', '_', $slugTitle);
		        $slugTitle = str_replace(' ', '-', strtolower($actor_auth_form_of_name));
		        $slugTitle = str_replace('.', '', strtolower($slugTitle));
		        $slugTitle = str_replace(',', '', strtolower($slugTitle));
		        $slugTitle = str_replace(':', '', strtolower($slugTitle));
		        $slugTitle = str_replace('(', '', strtolower($slugTitle));
		        $slugTitle = str_replace('?', '', strtolower($slugTitle));
		        $slugTitle = str_replace(')', '', strtolower($slugTitle));
		        $slugTitle = str_replace('/', '', strtolower($slugTitle));
            	$slugTitle = str_replace("'", "", strtolower($slugTitle));
                $slugTitle = str_replace('"', '', strtolower($slugTitle));
		        for ($x = 0; $x <= 100; $x++) {
		            $slugTitle = str_replace('--', '-', strtolower($slugTitle));
		            $pos = strpos($slugTitle, "--");
		            //print $pos. "\n";
		            if ($pos == 0) {
		                break;
		            }
		        }
		        //print "slugTitle: ".$slugTitle. "\n";
		        if (strlen($slugTitle) > 100) {
		            $slugTitle = substr($slugTitle, 0, 100);
		        }
		        $slugTitleConcat = $slugTitle;
		        for ($x = 0; $x <= 10000; $x++) {
		            //find next unique slug
		            $slugTitleDash = $slugTitle . "-";
		            $slugTitleCount = $x + 1;
		            $slugTitleConcat = $slugTitleDash . $slugTitleCount;
		            $q = $conn->prepare("SELECT slug FROM `slug` WHERE slug=? LIMIT 1");
		            $q->bindValue(1, $slugTitleConcat, PDO::PARAM_STR);
		            $q->execute();
		            $row = $q->fetch(PDO::FETCH_ASSOC);
		            if (!empty($row)) {
		                $slugTitleDash = $slugTitle . "-";
		                $slugTitleCount = $x + 1;
		                $slugTitleConcat = $slugTitleDash . $slugTitleCount;
		                //print "slug1b: ".$slugTitle."\n";
		                
		            } else {
		                break;
		            }
		        }
		        try {
		            $statement = $conn->prepare("INSERT INTO slug (slug.OBJECT_ID, slug.SLUG) VALUES(?,?)");
		            $statement->execute(array($actorID, $slugTitleConcat));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'slug.4' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'slug.4': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //get TYPE_ID
		        $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name='Maintenance note' LIMIT 1");
		        $q->execute();
		        $row = $q->fetch(PDO::FETCH_ASSOC);
		        if (!empty($row)) {
		            //print "Maintenance note ID: " . $row["ID"]. "\n";
		            $maintID = $row["ID"];
		        } else {
		            QubitXMLImport::addLog($sql, '', get_class($this), true);
		            print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
		        }
		        //
		        try {
		            $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SOURCE_CULTURE`) VALUES(?,?,?)");
		            $statement->execute(array($repoID, $maintID, 'en'));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'note.4' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'note.4': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //Get from note new inserted note.ID
		        $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
		        $q->execute();
		        $row = $q->fetch(PDO::FETCH_ASSOC);
		        if (!empty($row)) {
		            //print "Note ID: " . $row["maxNoteID"]. "\n";
		            $noteID = $row["maxNoteID"];
		        } else {
		            QubitXMLImport::addLog($sql, '', get_class($this), true);
		            print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
		        }
		        //print $noteID. "\n";
		        //
		        try {
		            $statement = $conn->prepare("INSERT INTO note_i18n (`ID`,`CULTURE`) VALUES(?,?)");
		            $statement->execute(array($noteID, 'en'));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'note_i18n.4' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'note_i18n.4': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //
		        try {
		            $statement = $conn->prepare("INSERT INTO property (`OBJECT_ID`,`NAME`,`SOURCE_CULTURE`) VALUES(?,?,?)");
		            $statement->execute(array($repoID, 'language', 'en'));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'property.4' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'property.4': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //Get from property new inserted property.ID
		        $q = $conn->prepare("SELECT max(ID) as maxPropertyID FROM `property`");
		        $q->execute();
		        $row = $q->fetch(PDO::FETCH_ASSOC);
		        if (!empty($row)) {
		            //print "Property ID: " . $row["maxPropertyID"]. "\n";
		            $propertyID = $row["maxPropertyID"];
		        } else {
		            QubitXMLImport::addLog($sql, '', get_class($this), true);
		            print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
		        }
		        //print $propertyID. "\n";
		        //
		        try {
		            $statement = $conn->prepare("INSERT INTO property_i18n (`VALUE`,`ID`,`CULTURE`) VALUES(?,?,?)");
		            $statement->execute(array('N;', $propertyID, 'en'));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'property_i18n.4' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'property_i18n.4': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //
		        try {
		            $statement = $conn->prepare("INSERT INTO property (`OBJECT_ID`,`NAME`,`SOURCE_CULTURE`) VALUES(?,?,?)");
		            $statement->execute(array($repoID, 'script', 'en'));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'property.5' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'property.5': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		        //Get from property new inserted property.ID
		        $q = $conn->prepare("SELECT max(ID) as maxPropertyID FROM `property`");
		        $q->execute();
		        $row = $q->fetch(PDO::FETCH_ASSOC);
		        if (!empty($row)) {
		            //print "Property ID: " . $row["maxPropertyID"]. "\n";
		            $propertyID = $row["maxPropertyID"];
		        } else {
		            QubitXMLImport::addLog($sql, '', get_class($this), true);
		            print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
		        }
		        //print $propertyID. "\n";
		        //
		        try {
		            $statement = $conn->prepare("INSERT INTO property_i18n (`VALUE`,`ID`,`CULTURE`) VALUES(?,?,?)");
		            $statement->execute(array('N;', $propertyID, 'en'));
		            $statement->closeCursor();
		            $statement = null;
		            //print "New 'property_i18n.5' record created successfully - "."\n";
		            
		        }
		        catch(PDOException $e) {
		            echo $e->getMessage();
		            print "Error 'property_i18n.5': " . $e->getMessage() . "\n";
		            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
		        }
		    }
		}

		// ####### update registries      
		//print   "registryIdentifier".$registryIdentifier."<br>";
		if ($registryIdentifier != "")
		{
			$q = $conn->prepare("SELECT actor_i18n.ID FROM `actor_i18n` WHERE actor_i18n.AUTHORIZED_FORM_OF_NAME=?");
			$q->bindValue(1, $registry, PDO::PARAM_STR);
			$q->execute();
			$row = $q->fetch(PDO::FETCH_ASSOC);
			if (!empty($row)) {
			    $registryID = $row["ID"];
			    //check if actor is in registry
				$q = $conn->prepare("SELECT registry.ID FROM `registry` WHERE registry.ID=?");
				$q->bindValue(1, $registryID, PDO::PARAM_STR);
				$q->execute();
				$row = $q->fetch(PDO::FETCH_ASSOC);
				if (empty($row)) {
					try {
					    $statement = $conn->prepare("INSERT INTO registry (`ID`) VALUES(?)");
					    $statement->execute(array($registryID));
					    $statement->closeCursor();
					    $statement = null;
					    //print "New 'registry' record created successfully - "."\n";
					}
					catch(PDOException $e) {
					    echo $e->getMessage();
					    print "Error 'repository': " . $e->getMessage() . "\n";
					    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
					}
				}
			} else {
			    //insert into object table - ID auto increment to use as ID for rest of updates
			    try {
			        $statement = $conn->prepare("INSERT INTO object (`CLASS_NAME`,`CREATED_AT`,`UPDATED_AT`) VALUES(?,?,?)");
			        $statement->execute(array('QubitRegistry', $date, $date));
			        $statement->closeCursor();
			        $statement = null;
			        //print "New 'object QubitRelation.2' record created successfully - "."\n";
			    }
			    catch(PDOException $e) {
			        echo $e->getMessage();
			        print "Error 'object QubitRelation.Registry': " . $e->getMessage() . "\n";
			        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
			    }

			    //Get from object new inserted object.ID
			    $q = $conn->prepare("SELECT max(ID) as maxRegistryID FROM `object`");
			    $q->execute();
			    $row = $q->fetch(PDO::FETCH_ASSOC);
			    if (!empty($row)) {
			        //print "Relation ID: " . $row["maxRelationID"]."\n";
			        $registryID = $row["maxRegistryID"];
			    } else {
			        print "Fail max(Registry.ID): " . "\n";
			    }

			    //Get from actor LFT and RGT
			    $q = $conn->prepare("SELECT actor.RGT FROM `actor` WHERE actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL LIMIT 1");
			    $q->execute();
			    $row = $q->fetch(PDO::FETCH_ASSOC);
			    if (!empty($row)) {
			        //print "actor.RGT: " . $row["RGT"]. "\n";
			        $RGT = $row["RGT"] - 1;
			        $LFT = $row["RGT"] - 2;
			        $q->closeCursor();
			        $q = null;
			    } else {
			        print "Fail LFT and RGT for actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL" . "\n";
			        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
			    }
			    //print $RGT. "\n";
			    //PARENT_ID=6 --always
			    //SOURCE_CULTURE = en -- always
			    try {
			        $statement = $conn->prepare("INSERT INTO actor (`ID`,`CORPORATE_BODY_IDENTIFIERS`,`LFT`,`RGT`,`SOURCE_CULTURE`) VALUES(?,?,?,?,?)");
			        $statement->execute(array($registryID, $registryIdentifier, $LFT, $RGT, 'en'));
			        $statement->closeCursor();
			        $statement = null;
			        print "New 'actor' record created successfully - ". "\n";
			        
			    }
			    catch(PDOException $e) {
			        echo $e->getMessage();
			        print "Error: " . $e->getMessage() . "\n";
			        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
			    }
			    //update LFT and RGT for actor.ID = 6 to new values
			    $RGT = $RGT + 2;
			    try {
			        $statement = $conn->prepare("UPDATE actor SET RGT=RGT+2 WHERE ID = 6");
			        $statement->execute(array(''));
			        $statement->closeCursor();
			        $statement = null;
			        print "Repository Actor RGT updated successfully". "\n";
			    }
			    catch(PDOException $e) {
			        echo $e->getMessage();
			        print "Error updating - Repository Actor RGT- record: " . $e->getMessage() . "\n";
			        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
			    }
			    //update LFT and RGT for actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL   to new values
			    $RGT = $RGT + 2;
			    try {
			        $statement = $conn->prepare("UPDATE actor SET RGT=RGT+2, LFT=LFT+2 WHERE actor.ID <> 6 and actor.ID <> 3 and actor.parent_id IS NULL");
			        $statement->execute(array(''));
			        $statement->closeCursor();
			        $statement = null;
			        print "Repository Actor updated successfully". "\n";
			        
			    }
			    catch(PDOException $e) {
			        echo $e->getMessage();
			        print "Error updating - Repository Actor RGT- record: " . $e->getMessage() . "\n";
			        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
			    }
			    
			    //SOURCE_CULTURE = en -- always
			    try {
			        $statement = $conn->prepare("INSERT INTO actor_i18n (`AUTHORIZED_FORM_OF_NAME`,`ID`,`CULTURE`) VALUES(?,?,?)");
			        $statement->execute(array($registry, $registryID, 'en'));
			        $statement->closeCursor();
			        $statement = null;
			        print "New 'actor_i18n' record created successfully - ". "\n";
			    }
			    catch(PDOException $e) {
			        echo $e->getMessage();
			        print "Error 'actor_i18n': " . $e->getMessage() . "\n";
			        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
			    }
			    //IDENTIFIER = is on top
			    try {
			        $statement = $conn->prepare("INSERT INTO registry (`ID`) VALUES(?)");
			        $statement->execute(array($registryID));
			        $statement->closeCursor();
			        $statement = null;
			        print "New 'repository' record created successfully - "."\n";

				    //Insert slug for Registry
				    $q = $conn->prepare("SELECT max(ID) as maxObjectID FROM `object`");
				    $q->execute();
				    $row = $q->fetch(PDO::FETCH_ASSOC);
				    if (!empty($row)) 
					{
				        print "maxObjectID: " . $row["maxObjectID"]. "\n";
				        $infoObjID = $row["maxObjectID"];

				        //slug
				        $slugTitle = null;
				        $slugTitle = preg_replace('/[^a-z0-9]/i', '_', $registryIdentifier);
				        $slugTitle = str_replace('.', '', strtolower($slugTitle));
				        $slugTitle = str_replace(',', '', strtolower($slugTitle));
				        $slugTitle = str_replace('(', '', strtolower($slugTitle));
				        $slugTitle = str_replace('?', '', strtolower($slugTitle));
				        $slugTitle = str_replace(')', '', strtolower($slugTitle));
				        $slugTitle = str_replace('/', '', strtolower($slugTitle));
            			$slugTitle = str_replace("'", "", strtolower($slugTitle));
                        $slugTitle = str_replace('"', '', strtolower($slugTitle));
				        while ($pos = strpos($slugTitle, '--') !== false) {
				            $slugTitle = str_replace('--', '-', strtolower($slugTitle));
				        }
				        if (strlen($slugTitle) > 100) {
				            $slugTitle = substr($slugTitle, 0, 100);
				        }
				        $slugTitleConcat = $slugTitle;
				        for ($x = 0; $x <= 10000; $x++) {
				            //find next unique slug
				            $slugTitleDash = $slugTitle . "-";
				            $slugTitleCount = $x + 1;
				            $slugTitleConcat = $slugTitleDash . $slugTitleCount;
				            $q = $conn->prepare("SELECT slug FROM `slug` WHERE slug=? LIMIT 1;");
				            $q->bindValue(1, $slugTitleConcat, PDO::PARAM_STR);
				            $q->execute();
				            $row = $q->fetch(PDO::FETCH_ASSOC);
				            if (!empty($row)) {
				                $slugTitleDash = $slugTitle . "-";
				                $slugTitleCount = $x + 1;
				                $slugTitleConcat = $slugTitleDash . $slugTitleCount;
				                print "slug1b: ".$slugTitleConcat."\n";
				                
				            } else {
				                //print "slug2: ".$slugTitleConcat."\n";
				                break;
				            }
				        }
				        //slug.OBJECT_ID = object.ID
				        //slug.SLUG = registry.registryIdentifier
				        try {
				            $statement = $conn->prepare("INSERT INTO slug (slug.OBJECT_ID, slug.SLUG) VALUES(?,?)");
				            $statement->execute(array($infoObjID, $slugTitleConcat));
				            $statement->closeCursor();
				            $statement = null;
				            print "New 'slug.6' record created successfully - "."\n";
				            
				        }
				        catch(PDOException $e) {
				            echo $e->getMessage();
				            print "Error 'slug.6': " . $e->getMessage() . "\n";
				            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
				        }
					}
			    }
			    catch(PDOException $e) {
			        echo $e->getMessage();
			        print "Error 'repository': " . $e->getMessage() . "\n";
			        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
			    }
			}
		}
		
		//also use to create unique id
        //slug
        
        
        $slugTitle = null;
        $slugTitle = $uniquenumber . "_" . $event_start_date . "_" . $event_end_date . "_" . $information_object_source . "_" . $information_object_reference_number . "_" . $information_object_volume_number . "_" . $information_object_part_number . "_" . $information_object_title;
		
        $slugTitle = str_replace(' ', '-', strtolower($slugTitle));
        $slugTitle = str_replace(':', '', strtolower($slugTitle));
        $slugTitle = str_replace('.', '', strtolower($slugTitle));
        $slugTitle = str_replace(',', '', strtolower($slugTitle));
        $slugTitle = str_replace('(', '', strtolower($slugTitle));
        $slugTitle = str_replace('?', '', strtolower($slugTitle));
        $slugTitle = str_replace(')', '', strtolower($slugTitle));
        $slugTitle = str_replace('/', '', strtolower($slugTitle));
		$slugTitle = str_replace("'", "", strtolower($slugTitle));
        $slugTitle = str_replace('"', '', strtolower($slugTitle));
        $slugTitle = preg_replace('/[^a-z0-9]/i', '_', $slugTitle);

        while ($pos = strpos($slugTitle, '--') !== false) {
            $slugTitle = str_replace('--', '-', strtolower($slugTitle));
        }
    	//create unique import_id 50 long
    	$unitid = substr($unitid."-".$slugTitle, 0, 1024);

        while ($pos = strpos($slugTitle, '--') !== false) {
            $slugTitle = str_replace('--', '-', strtolower($slugTitle));
        }
        $slugTitleConcat = $slugTitle;
    	//create unique import_id 50 long
    	$unitid = substr($unitid."-".$slugTitleConcat, 0, 1024);

//echo "unitid=".$unitid."\n";
        //######################## Add/Get Information Object
        $q = $conn->prepare("SELECT information_object.ID FROM `information_object` WHERE information_object.import_id=? LIMIT 1");
        $q->bindValue(1, $unitid, PDO::PARAM_STR);
        $q->execute();
        $row = $q->fetch(PDO::FETCH_ASSOC);
        if (!empty($row)) {
            print "Information Object exist ID: " . $row["ID"]. " try to insert:" . $unitid . "\n";
            $infoObjID = $row["ID"];
            QubitXMLImport::addLog($unitid, "Duplicate exist information_object with row id =". $row["ID"], get_class($this), true);
        } else {
            //print "0 results-information_object". "\n";
            //insert into object table - ID auto increment to use as ID for rest of updates
            try {
                $statement = $conn->prepare("INSERT INTO object (`CLASS_NAME`,`CREATED_AT`,`UPDATED_AT`) VALUES(?,?,?)");
                $statement->execute(array('QubitInformationObject', $date, $date));
                $statement->closeCursor();
                $statement = null;
                //print "New 'object.6' record created successfully - "."\n";
            }
            catch(PDOException $e) {
                echo $e->getMessage();
                print "Error 'object.6': " . $e->getMessage() . "\n";
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
            }
            //Get from object new inserted object.ID
            $q = $conn->prepare("SELECT max(ID) as maxObjectID FROM `object`");
            $q->execute();
            $row = $q->fetch(PDO::FETCH_ASSOC);

            if (!empty($row)) {
                //print "Information_object ID: " . $row["maxObjectID"]. "\n";
                $infoObjID = $row["maxObjectID"];
                //update RGT for information_object.ID = 1 to new values
                try {
                    $statement = $conn->prepare("UPDATE information_object SET RGT=RGT+2 WHERE ID = 1");
                    $statement->execute(array(''));
                    $statement->closeCursor();
                    $statement = null;
                    //print "information_object RGT updated successfully". "\n";
                    //get LFT/RGT from first record
                    $q = $conn->prepare("SELECT RGT FROM `information_object` WHERE ID=1 LIMIT 1");
                    $q->execute();
                    $row = $q->fetch(PDO::FETCH_ASSOC);
                    if (!empty($row)) {
                        //print "RGT: " . $row["RGT"]. "\n";
                        $RGT = $row["RGT"] - 1;
                        $LFT = $RGT - 1;
                    } else {
                        QubitXMLImport::addLog($sql, '', get_class($this), true);
                        print "Fail Maintenance note ID: " . $e->getMessage() . "\n";
                    }
                    //get record type from term from record text to integer
                    $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name=? LIMIT 1");
                    $q->bindValue(1, $this->recordtype, PDO::PARAM_STR);
                    $q->execute();
                    $row = $q->fetch(PDO::FETCH_ASSOC);
                    if (!empty($row)) {
                        //print "Language note ID: " . $row["ID"]."\n";
                        $recordTypeID = $row["ID"];
                    } else {
                        QubitXMLImport::addLog($sql, '', get_class($this), true);
                        $recordTypeID = null; 
                        print $this->recordtype." not set recordtype ID to null if not exist " . "\n";
                    }
                    try {

                        //slug.OBJECT_ID = object.ID
                        //slug.SLUG = information_object_i18n.TITLE
                        try {
                            $statement = $conn->prepare("INSERT INTO slug (slug.OBJECT_ID, slug.SLUG) VALUES(?,?)");
                            $statement->execute(array($infoObjID, $slugTitleConcat));
                            $statement->closeCursor();
                            $statement = null;
                            //print "New 'slug.6' record created successfully - "."\n";
                            
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'slug.6': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                    
                        $statement = $conn->prepare("INSERT INTO information_object (`ID`,`IDENTIFIER`,`LEVEL_OF_DESCRIPTION_ID`,`COLLECTION_TYPE_ID`,`REPOSITORY_ID`,`REGISTRY_ID`,`PARENT_ID`,`IMPORT_ID`,`SOURCE_STANDARD`,`FORMAT_ID`,`LFT`,`RGT`,`SOURCE_CULTURE`,`DESCRIPTION_DETAIL_id`)  VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)");
                        $statement->execute(array($infoObjID, $information_object_identifier, $levelOfDescriptID, $collectionTypeID, $repoID,$registryID, '1', $unitid, 'ISAD(G) 2nd edition', $recordTypeID, $LFT, $RGT, 'en', $levelOfDetailID));
                        $statement->closeCursor(); 
                        $statement = null;
                        //print "New 'information_object' record created successfully - "."\n";
/*
Get id from new inserted information object
$q = $conn->prepare("SELECT max(ID) as maxInfoID FROM `information_object`");
$q->execute();
$row = $q->fetch(PDO::FETCH_ASSOC);
                        $q->closeCursor(); 
                        $q = null;
if (!empty($row)) {
    print "maxInfoID ID: " . $row["maxInfoID"]."\n";

        $q = $conn->prepare("SELECT information_object.lft,information_object.rgt, information_object.ID  FROM `information_object` WHERE information_object.id=? LIMIT 1");
        $q->bindValue(1, $row["maxInfoID"], PDO::PARAM_STR);
        $q->execute();
        $row = $q->fetch(PDO::FETCH_ASSOC);
                        $q->closeCursor(); 
                        $q = null;
        if (!empty($row)) {

 	  print "Record:".$row['ID']." ";
	  $node = new arElasticSearchInformationObjectPdo($row['ID'], $options);
	  $data = $node->serialize();

	  QubitSearch::getInstance()->addDocument($data, 'QubitInformationObject');

	   Descend hierarchy
	  if (1 < ($row["rgt"] - $row["lft"]))
	  {
	     Pass ancestors and repository down to descendants
	    $this->recursivelyAddInformationObjects($row["ID"], 1, array(
	      'ancestors'  => array_merge($node->getAncestors(), array($node)),
	      'repository' => $node->getRepository()));
	  }
                        
            QubitXMLImport::addLog($unitid, "Duplicate exist information_object with row id =". $row["ID"], get_class($this), true);


        } else {
            print "0 results-information_object". "\n";
		}
} else {
    print "Fail max(maxInfoID.ID)" . "\n";
}
*/

                        //get TYPE_ID = 174 Language note
                        $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name='Language note' LIMIT 1");
                        //$q->bindValue(1, $slugTitleConcat, PDO::PARAM_STR);
                        //$q->bindValue(2, $calories, PDO::PARAM_INT);
                        //$q->bindValue(3, $colour, PDO::PARAM_STR);
                        $q->execute();
                        $row = $q->fetch(PDO::FETCH_ASSOC);
                        if (!empty($row)) {
                            //print "Language note ID: " . $row["ID"]."\n";
                            $langID = $row["ID"];
                        } else {
                            print "Fail Language note ID" . "\n" . "\n";
                        }
                        //Language note
                        try {
                            $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SCOPE`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                            $statement->execute(array($infoObjID, $langID, 'QubitInformationObject', 'en'));
                            $statement->closeCursor();
                            $statement = null;
                            //print "New 'Language note.1' record created successfully - "."\n";
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'Language note.1': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                        //Get from note new inserted note.ID
                        $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
                        $q->execute();
                        $row = $q->fetch(PDO::FETCH_ASSOC);
                        if (!empty($row)) {
                            //print "Note ID: " . $row["maxNoteID"]."\n";
                            $noteID = $row["maxNoteID"];
                        } else {
                            print "Fail max(note.ID)" . "\n";
                        }
                        //print $noteID. "\n";
                        //
                        try {
                            $statement = $conn->prepare("INSERT INTO note_i18n (`CONTENT`,`ID`,`CULTURE`) VALUES(?,?,?)");
                            //$statement->execute(array('English', $noteID, 'en')); //remove for prod. 
                            $statement->closeCursor();
                            $statement = null;
                            //print "New 'Language note_i18n.1' record created successfully - "."\n";
                            
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'Language note_i18n.1': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                        //get TYPE_ID = 125 General note
                        $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name='General note' LIMIT 1");
                        $q->execute();
                        $row = $q->fetch(PDO::FETCH_ASSOC);
                        if (!empty($row)) {
                            //print "General note ID: " . $row["ID"]."\n";
                            $langID = $row["ID"];
                        } else {
                            print "Fail General note ID: " . "\n";
                        }
                        //generalNote
                        try {
                            $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SCOPE`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                            $statement->execute(array($infoObjID, $langID, 'QubitInformationObject', 'en'));
                            $statement->closeCursor();
                            $statement = null;
                            //print "New 'General note.1' record created successfully - "."\n";
                            
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'General note.1': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                        //Get from note new inserted note.ID
                        $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
                        $q->execute();
                        $row = $q->fetch(PDO::FETCH_ASSOC);
                        if (!empty($row)) {
                            //print "Note ID: " . $row["maxNoteID"]."\n";
                            $noteID = $row["maxNoteID"];
                        } else {
                            print "Fail max(note.ID) " . "\n";
                        }
                        //print $noteID. "\n";
                        //
                        try {
                            $statement = $conn->prepare("INSERT INTO note_i18n (`CONTENT`,`ID`,`CULTURE`) VALUES(?,?,?)");
                            $statement->execute(array('', $noteID, 'en'));
                            $statement->closeCursor();
                            $statement = null;
                            //print "New 'General note_i18n.2' record created successfully - "."\n";
                            
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'General note_i18n.2': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                        if ($note[0] != "") {
                            //get TYPE_ID = 124 Archivist note
                            $noteType = "Archivist's note";
                            $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name=? LIMIT 1");
                            $q->bindValue(1, $noteType, PDO::PARAM_STR);
                            //$q->bindValue(2, $calories, PDO::PARAM_INT);
                            //$q->bindValue(3, $colour, PDO::PARAM_STR);
                            $q->execute();
                            $row = $q->fetch(PDO::FETCH_ASSOC);
                            if (!empty($row)) {
                                //print "Archivist note ID: " . $row["ID"]. "\n";
                                $archID = $row["ID"];
                            } else {
                                print "Fail Archivist note ID: " . "\n";
                            }
                            //sourcesDescription
                            try {
                                $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SCOPE`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                                $statement->execute(array($infoObjID, $archID, 'QubitInformationObject', 'en'));
                                $statement->closeCursor();
                                $statement = null;
                                //print "New 'sourcesDescription.1' record created successfully - "."\n";
                                
                            }
                            catch(PDOException $e) {
                                echo $e->getMessage();
                                print "Error 'sourcesDescription.1': " . $e->getMessage() . "\n";
                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                            }
                            //Get from note new inserted note.ID
                            $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
                            //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                            //$q->bindValue(2, $calories, PDO::PARAM_INT);
                            //$q->bindValue(3, $colour, PDO::PARAM_STR);
                            $q->execute();
                            $row = $q->fetch(PDO::FETCH_ASSOC);
                            if (!empty($row)) {
                                //print "Note ID: " . $row["maxNoteID"]."\n";
                                $noteID = $row["maxNoteID"];
                            } else {
                                print "Fail max(note.ID)" . "\n";
                            }
                            //print $noteID. "\n";
                            //
                            //$note0 = addslashes($note[0]);
								$note0 = str_replace('+', chr(10).chr(13)."--", $note[0]);
                            try {
                                $statement = $conn->prepare("INSERT INTO note_i18n (`CONTENT`,`ID`,`CULTURE`) VALUES(?,?,?)");
                                $statement->execute(array($note0, $noteID, 'en'));
                                $statement->closeCursor();
                                $statement = null;
                                //print "New 'Archivist note_i18n.1' record created successfully - "."\n";
                                
                            }
                            catch(PDOException $e) {
                                echo $e->getMessage();
                                print "Error 'Archivist note_i18n.1': " . $e->getMessage() . "\n";
                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                            }
                        }
                        //print "note1"."\n";
                        if (isset($note[1])) {
                            if ($note[1] != "") {
                                //get TYPE_ID = 124 Archivist note
                                $noteType = "Archivist's note";
                                $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name=? LIMIT 1");
                                $q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "Archivist note ID: " . $row["ID"]."\n";
                                    $archID = $row["ID"];
                                } else {
                                    print "Fail Archivist note ID: " . "\n";
                                }
                                //sourcesDescription
                                try {
                                    $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SCOPE`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                                    $statement->execute(array($infoObjID, $archID, 'QubitInformationObject', 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'sourcesDescription.2' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'sourcesDescription.2': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //Get from note new inserted note.ID
                                $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
                                //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "Note ID: " . $row["maxNoteID"]."\n";
                                    $noteID = $row["maxNoteID"];
                                } else {
                                    print "Fail max(note.ID)" . "\n";
                                }
                                //print $noteID. "\n";
                                //
//                                $note1 = addslashes($note[1]);
								$note1 = str_replace('+', chr(10).chr(13)."--", $note[1]);
                                try {
                                    $statement = $conn->prepare("INSERT INTO note_i18n (`CONTENT`,`ID`,`CULTURE`) VALUES(?,?,?)");
                                    $statement->execute(array($note1, $noteID, 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'Archivist note_i18n.2' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'Archivist note_i18n.2': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                            }
                        }
                        //print "note2"."\n";
                        if (isset($note[2])) {
                            if ($note[2] != "") {
                                //get TYPE_ID = 124 Archivist note
                                $noteType = "Archivist's note";
                                $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name=? LIMIT 1");
                                $q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "Archivist note ID: " . $row["ID"]."\n";
                                    $archID = $row["ID"];
                                } else {
                                    print "Fail Archivist note ID: " . "\n";
                                }
                                //sourcesDescription
                                try {
                                    $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SCOPE`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                                    $statement->execute(array($infoObjID, $archID, 'QubitInformationObject', 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'sourcesDescription.3' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'sourcesDescription.3': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //Get from note new inserted note.ID
                                $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
                                //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "Note ID: " . $row["maxNoteID"]."\n";
                                    $noteID = $row["maxNoteID"];
                                } else {
                                    print "Fail max(note.ID)" . "\n";
                                }
                                //print $noteID. "\n";
                                //
                                //$note2 = addslashes($note[2]);
                                try {
                                    $statement = $conn->prepare("INSERT INTO note_i18n (`CONTENT`,`ID`,`CULTURE`) VALUES(?,?,?)");
                                    $statement->execute(array($note[2], $noteID, 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'Archivist note_i18n.3' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'Archivist note_i18n.3': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                            }
                        }
                        //print "note3"."\n";
                        if (isset($note[3])) {
                            if ($note[3] != "") {
                                //get TYPE_ID = 124 Archivist note
                                $noteType = "Archivist's note";
                                $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name=? LIMIT 1");
                                $q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "Archivist note ID: " . $row["ID"]."\n";
                                    $archID = $row["ID"];
                                } else {
                                    print "Fail Archivist note ID: " . "\n";
                                }
                                //sourcesDescription
                                try {
                                    $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SCOPE`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                                    $statement->execute(array($infoObjID, $archID, 'QubitInformationObject', 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'sourcesDescription.4' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'sourcesDescription.4': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //Get from note new inserted note.ID
                                $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
                                //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "Note ID: " . $row["maxNoteID"]."\n";
                                    $noteID = $row["maxNoteID"];
                                } else {
                                    print "Fail max(note.ID)" . "\n";
                                }
                                //print $noteID. "\n";
                                //
                                //$note3 = addslashes($note[3]);
                                try {
                                    $statement = $conn->prepare("INSERT INTO note_i18n (`CONTENT`,`ID`,`CULTURE`) VALUES(?,?,?)");
                                    $statement->execute(array($note3, $noteID, 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'Archivist note_i18n.4' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'Archivist note_i18n.4': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                            }
                        }
                        //get TYPE_ID = 124 Archivist note
/*                        $noteType = "Archivist's note";
                        $q = $conn->prepare("SELECT ID FROM `term_i18n` WHERE name=? LIMIT 1");
                        $q->bindValue(1, $noteType, PDO::PARAM_STR);
                        $q->execute();
                        $row = $q->fetch(PDO::FETCH_ASSOC);
                        if (!empty($row)) {
                            $archID = $row["ID"];
                        } else {
                            print "Fail Archivist note ID: " . "\n";
                        }
                        try {
                            $statement = $conn->prepare("INSERT INTO note (`OBJECT_ID`,`TYPE_ID`,`SCOPE`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                            $statement->execute(array($infoObjID, $archID, 'QubitInformationObject', 'en'));
                            $statement->closeCursor();
                            $statement = null;
                            
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'Archivist note.4': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                        $q = $conn->prepare("SELECT max(ID) as maxNoteID FROM `note`");
                        $q->execute();
                        $row = $q->fetch(PDO::FETCH_ASSOC);
                        if (!empty($row)) {
                            $noteID = $row["maxNoteID"];
                        } else {
                            print "Fail max(note.ID)" . "\n";
                        }
                        //
                        try {
                            $statement = $conn->prepare("INSERT INTO note_i18n (`CONTENT`,`ID`,`CULTURE`) VALUES(?,?,?)");
                            $statement->execute(array('NAAIRS Historical data', $noteID, 'en'));
                            $statement->closeCursor();
                            $statement = null;
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'Archivist note_i18n.4': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                        try {
                            $statement = $conn->prepare("INSERT INTO property (`OBJECT_ID`,`NAME`,`SOURCE_CULTURE`) VALUES(?,?,?)");
                            $statement->execute(array($infoObjID, 'languageOfDescription', 'en'));
                            $statement->closeCursor();
                            $statement = null;
                            
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'property languageOfDescription.4': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        } 
                        $q = $conn->prepare("SELECT max(ID) as maxPropertyID FROM `property`");
                        $q->execute();
                        $row = $q->fetch(PDO::FETCH_ASSOC);
                        if (!empty($row)) {
                            $propertyID = $row["maxPropertyID"];
                        } else {
                            print "Fail max(property.ID): " . "\n";
                        }
                        $value = addslashes('a:1:{i:0;s:2:"en";}');
                        try {
                            $statement = $conn->prepare("INSERT INTO property_i18n (`VALUE`,`ID`,`CULTURE`) VALUES(?,?,?)");
                            $statement->execute(array($value, $propertyID, 'en'));
                            $statement->closeCursor();
                            $statement = null;
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'property_i18n languageOfDescription.4': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                        try {
                            $statement = $conn->prepare("INSERT INTO property (`OBJECT_ID`,`NAME`,`SOURCE_CULTURE`) VALUES(?,?,?)");
                            $statement->execute(array($infoObjID, 'language', 'en'));
                            $statement->closeCursor();
                            $statement = null;
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'property languageOfDescription.5': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                        $q = $conn->prepare("SELECT max(ID) as maxPropertyID FROM `property`");
                        $q->execute();
                        $row = $q->fetch(PDO::FETCH_ASSOC);
                        if (!empty($row)) {
                            $propertyID = $row["maxPropertyID"];
                        } else {
                            print "Fail max(property.ID): " . "\n";
                        }
                        $value = addslashes('a:1:{i:0;s:2:"en";}');
                        try {
                            $statement = $conn->prepare("INSERT INTO property_i18n (`VALUE`,`ID`,`CULTURE`) VALUES(?,?,?)");
                            $statement->execute(array($value, $propertyID, 'en'));
                            $statement->closeCursor();
                            $statement = null;
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'property_i18n languageOfDescription.5': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }


*/
                        //information_object_i18n
                        try {
                            $statement = $conn->prepare("INSERT INTO information_object_i18n (`TITLE`,`EXTENT_AND_MEDIUM`,`RELATED_UNITS_OF_DESCRIPTION`,`RULES`,`SOURCES`,`ID`,`CULTURE`) VALUES(?,?,?,?,?,?,?)");
                            $statement->execute(array($information_object_title, $information_object_extent, '', '', $information_object_source, $infoObjID, 'en'));
                            $statement->closeCursor();
                            $statement = null;
                            //print "New 'information_object_i18n.2' record created successfully - "."\n";
                            //STATUS_ID = 159 - Draft  158 - publication
                            try {
                                $statement = $conn->prepare("INSERT INTO status (`OBJECT_ID`,`TYPE_ID`,`STATUS_ID`) VALUES(?,?,?)");
                                $statement->execute(array($infoObjID, $publicationID, $statusID));
                                $statement->closeCursor();
                                $statement = null;
                                //print "New 'property_i18n languageOfDescription.5' record created successfully - "."\n";
                                $sql = "INSERT INTO status (`OBJECT_ID`,`TYPE_ID`,`STATUS_ID`) VALUES ('" . $infoObjID . "'," . $publicationID . ",'" . $statusID . "')";
                                //print "New 'status' record created successfully - ";
                                //insert dates
                                //insert into object table - ID auto increment to use as ID for rest of updates
                                try {
                                    $statement = $conn->prepare("INSERT INTO object (`CLASS_NAME`,`CREATED_AT`,`UPDATED_AT`) VALUES(?,?,?)");
                                    $statement->execute(array('QubitEvent', $date, $date));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'object event.1' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'object event.1': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //Get from object new inserted object.ID
                                $q = $conn->prepare("SELECT max(ID) as maxObjectID FROM `object`");
                                //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "Event ID: " . $row["maxObjectID"]."\n";
                                    $eventID = $row["maxObjectID"];
                                } else {
                                    print "Fail max(property.ID): " . "\n";
                                }
                                //print $eventID. "\n";
                                //add dates to event
                                if (!is_numeric($event_start_date)) {
                                    $event_start_date = "";
                                }
                                else
                                {
                                
                                }
                                if (!is_numeric($event_end_date)) {
                                    $event_end_date = "";
                                }
                                else
                                {
                                
                                }
                                try {
                                    $statement = $conn->prepare("INSERT INTO event (`ID`,`START_DATE`,`END_DATE`,`TYPE_ID`,`OBJECT_ID`,`SOURCE_CULTURE`) VALUES(?,?,?,?,?,?)");
                                    $statement->execute(array($eventID, $event_start_date, $event_end_date, $creationID, $infoObjID, 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'object event.2' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'object event.2': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //slug.OBJECT_ID = object.ID
                                $randomString = substr(str_shuffle(MD5(microtime())), 0, 20);
                                $slugTitle = $randomString;
                                try {
                                    $statement = $conn->prepare("INSERT INTO slug (slug.OBJECT_ID, slug.SLUG) VALUES(?,?)");
                                    $statement->execute(array($eventID, $slugTitle));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'slug.9' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'slug.9': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //add dates to event_i18n
                                $event_date_range = $event_start_date . "-" . $event_end_date;
                                try {
                                    $statement = $conn->prepare("INSERT INTO event_i18n (`DATE`,`ID`,`CULTURE`) VALUES(?,?,?)");
                                    $statement->execute(array($event_date_range, $eventID, 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'object event_i18n.9' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'object event_i18n.9': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //insert actor event
                                //insert into object table - ID auto increment to use as ID for rest of updates
                                try {
                                    $statement = $conn->prepare("INSERT INTO object (`CLASS_NAME`,`CREATED_AT`,`UPDATED_AT`) VALUES(?,?,?)");
                                    $statement->execute(array('QubitEvent', $date, $date));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'object event.10' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'object event.10': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //Get from object new inserted object.ID
                                //Get from object new inserted object.ID
                                $q = $conn->prepare("SELECT max(ID) as maxObjectID FROM `object`");
                                //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "Event ID: " . $row["maxObjectID"]."\n";
                                    $eventID = $row["maxObjectID"];
                                } else {
                                    print "Fail max(property.ID): " . "\n";
                                }
                                //print $eventID. "\n";
                                //add actor to event
                                try {
                                    $statement = $conn->prepare("INSERT INTO event (`ID`,`TYPE_ID`,`OBJECT_ID`,`ACTOR_ID`,`SOURCE_CULTURE`) VALUES(?,?,?,?,?)");
                                    $statement->execute(array($eventID, $creationID, $infoObjID, $actorID, 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'object event.11' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'object event.11': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //slug.OBJECT_ID = object.ID
                                $randomString = substr(str_shuffle(MD5(microtime())), 0, 20);
                                $slugTitle = $randomString;
                                try {
                                    $statement = $conn->prepare("INSERT INTO slug (slug.OBJECT_ID, slug.SLUG) VALUES(?,?)");
                                    $statement->execute(array($eventID, $slugTitle));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'slug.10' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'slug.10': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //add dates to event_i18n
                                try {
                                    $statement = $conn->prepare("INSERT INTO event_i18n (`ID`,`CULTURE`) VALUES(?,?)");
                                    $statement->execute(array($eventID, 'en'));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'object event_i18n.9' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'object event_i18n.9': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                 // access object
                                //insert into object table - ID auto increment to use as ID for rest of updates
                                try {
                                    $statement = $conn->prepare("INSERT INTO object (`CLASS_NAME`,`CREATED_AT`,`UPDATED_AT`) VALUES(?,?,?)");
                                    $statement->execute(array('QubitAccessObject', $date, $date));
                                    $statement->closeCursor();
                                    $statement = null;
                                    //print "New 'access object event.1' record created successfully - "."\n";
                                    
                                }
                                catch(PDOException $e) {
                                    echo $e->getMessage();
                                    print "Error 'access object event.1': " . $e->getMessage() . "\n";
                                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                }
                                //Get from object new inserted object.ID
                                $q = $conn->prepare("SELECT max(ID) as maxAccessID FROM `object`");
                                //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                                //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                $q->execute();
                                $row = $q->fetch(PDO::FETCH_ASSOC);
                                if (!empty($row)) {
                                    //print "maxAccessID ID: " . $row["maxAccessID"]."\n";
                                    $accessID = $row["maxAccessID"];
                                    //check is ID = 1 exist
                                    $q = $conn->prepare("SELECT * FROM `access_object` WHERE ID = 1 LIMIT 1");
                                    //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                                    //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                    //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                    $q->execute();
                                    $row = $q->fetch(PDO::FETCH_ASSOC);
                                    if (empty($row)) {
                                        //print "no records". "\n";
                                        try {
                                            $statement = $conn->prepare("INSERT INTO access_object (`ID`,`LFT`,`RGT`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                                            $statement->execute(array('1', '1', '2', 'en'));
                                            $statement->closeCursor();
                                            $statement = null;
                                            //print "New 'access object.1' record created successfully - "."\n";
                                            
                                        }
                                        catch(PDOException $e) {
                                            echo $e->getMessage();
                                            print "Error 'access object.1': " . $e->getMessage() . "\n";
                                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                        }
                                    } else {
                                        //print "access_object ID = 1 not found"."\n";
                                        
                                    }
                                    //update RGT for information_object.ID = 1 to new values
                                    $RGT = $RGT + 2;
                                   try {
                                        $statement = $conn->prepare("UPDATE access_object SET RGT=RGT+2 WHERE ID = 1");
                                        $statement->execute(array(''));
                                        $statement->closeCursor();
                                        $statement = null;
                                        //print "Actor updated successfully". "\n";
                                        //get LFT/RGT from first record
                                        $q = $conn->prepare("SELECT RGT FROM `access_object` WHERE ID=1 LIMIT 1");
                                        //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                                        //$q->bindValue(2, $calories, PDO::PARAM_INT);
                                        //$q->bindValue(3, $colour, PDO::PARAM_STR);
                                        $q->execute();
                                        $row = $q->fetch(PDO::FETCH_ASSOC);
                                        if (!empty($row)) {
                                            //print "RGT: " . $row["RGT"]. "\n";
                                            $RGT = $row["RGT"] - 1;
                                            $LFT = $RGT - 1;
                                        } else {
                                            print "Fail max(property.ID): " . "\n";
                                        }
                                        try {
                                            $statement = $conn->prepare("INSERT INTO access_object (`ID`,`LFT`,`RGT`,`SOURCE_CULTURE`) VALUES(?,?,?,?)");
                                            $statement->execute(array($accessID, $LFT, $RGT, 'en'));
                                            $statement->closeCursor();
                                            $statement = null;
                                            //print "New 'access object.2' record created successfully - "."\n";
                                            //slug.OBJECT_ID = object.ID
                                            $randomString = substr(str_shuffle(MD5(microtime())), 0, 20);
                                            $slugTitle = $randomString;
                                            try {
                                                $statement = $conn->prepare("INSERT INTO slug (slug.OBJECT_ID, slug.SLUG) VALUES(?,?)");
                                                $statement->execute(array($accessID, $slugTitle));
                                                $statement->closeCursor();
                                                $statement = null;
                                                //print "New 'slug.12' record created successfully - "."\n";
                                                
                                            }
                                            catch(PDOException $e) {
                                                echo $e->getMessage();
                                                print "Error 'slug.12': " . $e->getMessage() . "\n";
                                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                            }
                                            // access_object_i18n
                                            try {
                                                $statement = $conn->prepare("INSERT INTO access_object_i18n (`NAME`,`ID`,`REFUSAL_ID`,`SENSITIVITY_ID`,`PUBLISH_ID`,`CLASSIFICATION_ID`,`RESTRICTION_ID`,`OBJECT_ID`,`CULTURE`) VALUES(?,?,?,?,?,?,?,?,?)");
                                                $statement->execute(array($information_object_title, $accessID, $refusalID, $sensitivityID, $publishID, $classificationID, $restrictionID, $infoObjID, 'en'));
                                                $statement->closeCursor();
                                                $statement = null;
                                                //print "New 'access_object_i18n.3' record created successfully - "."\n";
                                                
                                            }
                                            catch(PDOException $e) {
                                                echo $e->getMessage();
                                                print "Error 'access_object_i18n.3': " . $e->getMessage() . "\n";
                                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                            }
                                        }
                                        catch(PDOException $e) {
                                            echo $e->getMessage();
                                            print "Error 'access object.2': " . $e->getMessage() . "\n";
                                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                        }
                                    }
                                    catch(PDOException $e) {
                                        echo $e->getMessage();
                                        print "Error updating - updating - Actor - record: " . $e->getMessage() . "\n";
                                        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                                    }
                                }
                            }
                            catch(PDOException $e) {
                                echo $e->getMessage();
                                print "Error 'property_i18n languageOfDescription.5': " . $e->getMessage() . "\n";
                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                            }

                           //insert into object table - ID auto increment to use as ID for rest of updates
                            try {
                                $statement = $conn->prepare("INSERT INTO object (`CLASS_NAME`,`CREATED_AT`,`UPDATED_AT`) VALUES(?,?,?)");
                                $statement->execute(array('QubitRelation', $date, $date));
                                $statement->closeCursor();
                                $statement = null;
                                //print "New 'object QubitRelation.2' record created successfully - "."\n";
                                
                            }
                            catch(PDOException $e) {
                                echo $e->getMessage();
                                print "Error 'object QubitRelation.2': " . $e->getMessage() . "\n";
                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                            }
                           //Get from object new inserted object.ID
                            $q = $conn->prepare("SELECT max(ID) as maxRelationID FROM `object`");
                            //$q->bindValue(1, $noteType, PDO::PARAM_STR);
                            //$q->bindValue(2, $calories, PDO::PARAM_INT);
                            //$q->bindValue(3, $colour, PDO::PARAM_STR);
                            $q->execute();
                            $row = $q->fetch(PDO::FETCH_ASSOC);
                            if (!empty($row)) {
                                //print "Relation ID: " . $row["maxRelationID"]."\n";
                                $relationID = $row["maxRelationID"];
                            } else {
                                print "Fail max(property.ID): " . "\n";
                            }
                            //print $relationID. "\n";
                            //add dates to event
                            try {
                                $statement = $conn->prepare("INSERT INTO relation (`ID`,`SUBJECT_ID`,`OBJECT_ID`,`TYPE_ID`,`SOURCE_CULTURE`) VALUES(?,?,?,?,?)");
                                $statement->execute(array($relationID, $accessID, $infoObjID, 1077, 'en'));
                                $statement->closeCursor();
                                $statement = null;
                                //print "New 'object event.5' record created successfully - "."\n";
                                
                            }
                            catch(PDOException $e) {
                                echo $e->getMessage();
                                print "Error 'object event.5': " . $e->getMessage() . "\n";
                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                            }
                            //slug.OBJECT_ID = object.ID
                            $randomString = substr(str_shuffle(MD5(microtime())), 0, 10);
                            $slugTitle = $randomString;
                            try {
                                $statement = $conn->prepare("INSERT INTO slug (slug.OBJECT_ID, slug.SLUG) VALUES(?,?)");
                                $statement->execute(array($relationID, $slugTitle));
                                $statement->closeCursor();
                                $statement = null;
                                //print "New 'slug.13' record created successfully - "."\n";
                                
                            }
                            catch(PDOException $e) {
                                echo $e->getMessage();
                                print "Error 'slug.13': " . $e->getMessage() . "\n";
                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                            }
                            try {
                                $statement = $conn->prepare("INSERT INTO relation_i18n (`ID`,`CULTURE`) VALUES(?,?)");
                                $statement->execute(array($relationID, 'en'));
                                $statement->closeCursor();
                                $statement = null;
                                //print "New 'object relation_i18n.5' record created successfully - "."\n";
                                
                            }
                            catch(PDOException $e) {
                                echo $e->getMessage();
                                print "Error 'object relation_i18n.5': " . $e->getMessage() . "\n";
                                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                            }
                        }
                        catch(PDOException $e) {
                            echo $e->getMessage();
                            print "Error 'property_i18n languageOfDescription.5': " . $e->getMessage() . "\n";
                            QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                        }
                    }
                    catch(PDOException $e) {
                        echo $e->getMessage();
                        print "Error 'information_object': " . $e->getMessage() . "\n";
                        QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                    }
                }
                catch(PDOException $e) {
                    echo $e->getMessage();
                    print "Error 'information_object': " . $e->getMessage() . "\n";
                    QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                }
            } else {
                QubitXMLImport::addLog($sql, $e->getMessage(), get_class($this), true);
                print "Fail max(object.ID)" . "\n";
            }

		    // for CSV export
		    $this->CSVValues = array('identifier' => $repo_identifier . " " . $information_object_identifier, 'unitid' => $unitid, 'unittitle' => $information_object_title, 'dateType' => "Creation", 'unitdate' => $dates, 'startDate' => $event_start_date, 'endDate' => $event_end_date, 'level' => "Partial", 'extent' => $information_object_extent, 'source' => $information_object_source, 'referenceNumber' => $information_object_reference_number, 'volumeNumber' => $information_object_volume_number, 'partNumber' => $information_object_part_number, 'corpname' => $creator, 'repositorycode' => $repositoryCode, 'repositoryCountryCode' => $repositoryCountryCode, 'repocorpname' => $repo_auth_form_of_name, 'custodhist' => "", 'scopecontent' => "", 'appraisal' => "", 'accruals' => "", 'arrangement' => "", 'accessrestrict' => "", 'userestrict' => "", 'langcode' => "en", 'scriptcode' => "en", 'langmaterial' => "en", 'phystech' => "", 'otherfindaid' => "", 'originalsloc' => "", 'altformavail' => "", 'relateddescriptions' => "", 'bibliography' => "", 'relatedmaterial' => "", 'note' => $note0, 'archivistnote' => $note1, 'publicationnote' => "", 'subject' => "", 'geogname' => "", 'name' => "", 'descriptionIdentifier' => "", 'institutionIdentifier' => "", 'rules' => "", 'statusDescription' => "", 'levelOfDetail' => "Partial", 'date' => "", 'desclanguage' => "en", 'descscript' => "en", 'langcode' => "en", 'scriptcode' => "en", 'recordtype' => $information_object_record_type, 'size' => "", 'type' => "", 'classification' => "Public", 'availabilityId' => "Yes",'registryIdentifier' => $registryIdentifier,'registry' => $registry,'filePath' => $filePath);
            //print $infoObjID. "\n";
            // do batch create of .xml publish file
            //QubitXMLImport::addBatchPublishXML($accessID, $infoObjID);
            // do batch create of .csv publish file
            QubitXMLImport::addBatchPublishCSV($accessID, $infoObjID, $this->CSVValues, $csvfile);
 
        }
        //	$conn->close();
    }
}

