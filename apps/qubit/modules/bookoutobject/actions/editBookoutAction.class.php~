<?php

/**
 * Bookout Object edit component.
 *
 * @package    qubit
 * @subpackage Bookout Module
 * @author     Tsholo Ramesega
 * @version    SVN: $Id
 */
 
 
class BookoutObjectEditBookoutAction extends DefaultEditAction
{
  public static
    $NAMES = array(
      'time_period',
      'MonthSelector_time_period',
      'year_time_period',
      'hour_time_period',
      'minute_time_period',
      'second_time_period',
      'name',
	  'remarks',	  	   	  
      'requestor',
	  'dispatcher',
	  'location',
	  'strong_room',
      'shelf',
      'row',
      'bin',
      'object_id',
      'unique_identifier',
	  'record_condition',
	  'service_provider',
	  'serviceProviderFlag',
	  'availability');
	  
  protected function earlyExecute()
  {
    $this->resource = new QubitBookoutObject;
    if (isset($this->getRoute()->resource))
    {
      $this->resource = $this->getRoute()->resource;
    }

    if (!$this->getUser()->isAuthenticated())
    {
      return sfView::NONE;
    }
	
	// Check user authorization
	if (!QubitAcl::check($this->resource, 'bookOut'))
	{
	  QubitAcl::forwardUnauthorized();
	}

 	foreach (QubitRelation::getRelationsBySubjectId($this->resource->id) as $item2)
	{ 
		$this->informationObjects = QubitInformationObject::getById($item2->objectId);
	}

	$this->informationObj = new QubitInformationObject;
	$this->informationObj = QubitInformationObject::getById($this->informationObjects->id);

    $title = $this->context->i18n->__('Add new Booked Item');
    if (isset($this->getRoute()->resource))
    {
      if (1 > strlen($title = $this->resource->__toString()))
      {
        $title = $this->context->i18n->__('Untitled');
      }
	  
      $title = $this->context->i18n->__('Edit %1%', array('%1%' => $title));
    }
	
    $this->response->setTitle("$title - {$this->response->getTitle()}");
  }
  
  protected function addField($name)
  {
    switch ($name)
    {  
	  case 'remarks':
        $this->form->setDefault('remarks', "");
        $this->form->setValidator('remarks', new sfValidatorString);
        $this->form->setWidget('remarks', new sfWidgetFormInput);

        break;

	  case 'location':
		foreach ($this->informationObj->getPhysicalObjects() as $item)
		{
			$this->form->setDefault('location', $item->location);  // bring a value of the shelf field in Bookout
		}
        $this->form->setValidator('location', new sfValidatorString);
        $this->form->setWidget('location', new sfWidgetFormInput);

        break;

	  case 'record_condition':
		foreach ($this->informationObj->getAccessObjects() as $item)
		{
			$this->form->setDefault('record_condition', $item->restriction_condition);  // bring a value of the shelf field in Bookout
		}
        $this->form->setValidator('record_condition', new sfValidatorString);
        $this->form->setWidget('record_condition', new sfWidgetFormInput);

        break;

	  case 'availability':

		foreach ($this->informationObj->getPresevationObjects() as $item)
		{
			$this->form->setDefault('availability', $item->availability);  // bring a value of the shelf field in Bookout
		}
        $this->form->setValidator('availability', new sfValidatorString);
        $this->form->setWidget('availability', new sfWidgetFormInput);

        break;

      case 'unique_identifier': 
		foreach ($this->informationObj->getPhysicalObjects() as $item)
		{
			$this->form->setDefault('unique_identifier', $item->uniqueIdentifier);  // bring a value of the  field in Bookout
		}
        $this->form->setValidator('unique_identifier', new sfValidatorString);
        $this->form->setWidget('unique_identifier', new sfWidgetFormInput);

        break;

	  case 'strong_room': 	  

		foreach ($this->informationObj->getPhysicalObjects() as $item)
		{
			$this->form->setDefault('strong_room', $item->__toString());  // bring a value of the  field in Bookout
		}
        $this->form->setValidator('strong_room', new sfValidatorString);
        $this->form->setWidget('strong_room', new sfWidgetFormInput);

        break;

      case 'shelf': 
	    $this->form->setDefault('shelf', $this->informationObj->shelf);  // bring a value of the shelf field in Bookout
        $this->form->setValidator('shelf', new sfValidatorString);
        $this->form->setWidget('shelf', new sfWidgetFormInput);

        break;

      case 'row': 
	    $this->form->setDefault('row', $this->informationObj->row);  // bring a value of the shelf field in Bookout
        $this->form->setValidator('row', new sfValidatorString);
        $this->form->setWidget('row', new sfWidgetFormInput);

        break;

      case 'bin': 
	    $this->form->setDefault('bin', $this->informationObj->bin);  // bring a value of the shelf field in Bookout
        $this->form->setValidator('bin', new sfValidatorString);
        $this->form->setWidget('bin', new sfWidgetFormInput);

        break;

      case 'name':
        $this->form->setDefault($name, $this->resource[$name]);
        $this->form->setValidator($name, new sfValidatorString);
        $this->form->setWidget($name, new sfWidgetFormInput);

        break;

	  case 'requestor':
		$values = array();
		foreach (QubitUser::getAll() as $user)
		{
			$values[$user->username] = $user->__toString();
		}  

        $this->form->setValidator('requestor', new sfValidatorString);
        $this->form->setWidget('requestor', new sfWidgetFormSelect(array('choices' =>$values)));

        break;

	  case 'dispatcher':
 		$values = array();
		foreach (QubitUser::getAll() as $user)
		{
			$values[$user->username] = $user->__toString();
		}  

        $this->form->setValidator('dispatcher', new sfValidatorString);
        $this->form->setWidget('dispatcher', new sfWidgetFormSelect(array('choices' =>$values)));

        break;

      case 'time_period':
        $this->form->setValidator('time_period', new sfValidatorString);
        $this->form->setWidget('time_period', new sfWidgetFormInput);
		
        break;

      case 'MonthSelector_time_period':
        $this->form->setValidator('MonthSelector_time_period', new sfValidatorString);
        $this->form->setWidget('MonthSelector_time_period', new sfWidgetFormInput);
		
        break;

      case 'year_time_period':
        $this->form->setValidator('year_time_period', new sfValidatorString);
        $this->form->setWidget('year_time_period', new sfWidgetFormInput);

        break;

      case 'hour_time_period':
        $this->form->setValidator('hour_time_period', new sfValidatorString);
        $this->form->setWidget('hour_time_period', new sfWidgetFormInput);

        break;

      case 'minute_time_period':
        $this->form->setValidator('minute_time_period', new sfValidatorString);
        $this->form->setWidget('minute_time_period', new sfWidgetFormInput);

        break;

      case 'second_time_period':
        $this->form->setValidator('second_time_period', new sfValidatorString);
        $this->form->setWidget('second_time_period', new sfWidgetFormInput);

        break;

      case 'service_provider':
        // Get list of repositories
        $criteria = new Criteria;

        // Do source culture fallback
        $criteria = QubitCultureFallback::addFallbackCriteria($criteria, 'QubitActor');

        // Ignore root repository
        $criteria->add(QubitActor::ID, QubitRepository::ROOT_ID, Criteria::NOT_EQUAL);

        $criteria->addAscendingOrderByColumn('authorized_form_of_name');

        $cache = QubitCache::getInstance();
        $cacheKey = 'advanced-search:list-of-repositories:'.$this->context->user->getCulture();
        if ($cache->has($cacheKey))
        {
          $choices = $cache->get($cacheKey);
        }
        else
        {
          $choices = array();
          $choices[null] = null;
          foreach (QubitRepository::get($criteria) as $repository)
          {
            $choices[$repository->id] = $repository->__toString();
          }

          $cache->set($cacheKey, $choices, 3600);
        }

		$this->form->setDefault('service_provider', $this->resource['service_provider']);  // bring a value of the  field in Bookout
        $this->form->setValidator('service_provider', new sfValidatorChoice(array('choices' => array_keys($choices))));
        $this->form->setWidget('service_provider', new sfWidgetFormSelect(array('choices' => $choices)));

        break;

	  case 'serviceProviderFlag':
		//$this->form->setDefault('serviceProviderFlag', "");  // bring a value of the  field in Bookout
        $this->form->setValidator('serviceProviderFlag', new sfValidatorString);
        $this->form->setWidget('serviceProviderFlag', new sfWidgetFormInput);

        break;
	
      default:

        return parent::addField($name);
    }
  }
  
  protected function processField($field)
  {
    switch ($field->getName())
    {
      case 'requestor':
        //unset($this->resource->requestor);
        //$params = $this->context->routing->parse(Qubit::pathInfo($this->form->getValue('requestor')));
        //$this->resource->requestor = $params['_sf_route']->resource;

        break;
	
      case 'dispatcher':
        //unset($this->resource->dispatcher);
        //$params = $this->context->routing->parse(Qubit::pathInfo($this->form->getValue('dispatcher')));
        //$this->resource->dispatcher = $params['_sf_route']->resource;

        break;

      default:

        return parent::processField($field);
    }
  }

  protected function processForm()
  {
  
    if (null !== $this->form->getValue('name'))
    {                                                      
		$bookinObject = new QubitBookinObject;
		  
		$bookinObject->name = $this->form->getValue('name');
		if ($this->form->getValue('time_period') == null || $this->form->getValue('time_period') == "")
		{
			$time_period = "";
		}
		else
		{
			$time_period = $this->form->getValue('time_period');
		}
		$bookinObject->time_period = $time_period;
		if ($this->form->getValue('remarks') == null || $this->form->getValue('remarks') == "")
		{
			$remarks = "Re-book Out";
		}
		else
		{
			$remarks = "Re-book Out: " . $this->form->getValue('remarks'); 
		}
		$bookinObject->remarks = $remarks;
		if ($this->form->getValue('unique_identifier') == null || $this->form->getValue('unique_identifier') == "")
		{
			$unique_identifier = "";
		}
		else
		{
			$unique_identifier = $this->form->getValue('unique_identifier');
		}
		$bookinObject->unique_identifier = $unique_identifier; //Unique identifier
		if ($this->form->getValue('strong_room') == null || $this->form->getValue('strong_room') == "")
		{
			$strong_room = "";
		}
		else
		{
			$strong_room = $this->form->getValue('strong_room');
		}
		$bookinObject->strong_room = $strong_room; //new field
		if ($this->form->getValue('shelf') == null || $this->form->getValue('shelf') == "")
		{
			$shelf = "";
		}
		else
		{
			$shelf = $this->form->getValue('shelf');
		}
		$bookinObject->shelf = $shelf; //new field
		if ($this->form->getValue('row') == null || $this->form->getValue('row') == "")
		{
			$row = "";
		}
		else
		{
			$row = $this->form->getValue('row');
		}
		$bookinObject->row = $row; //new field
		if ($this->form->getValue('location') == null || $this->form->getValue('location') == "")
		{
			$location = "";
		}
		else
		{
			$location = $this->form->getValue('location');
		}
		$bookinObject->location = $location; //$location
		if ($this->form->getValue('availability') == null || $this->form->getValue('availability') == "")
		{
			$availability = "";
		}
		else
		{
			$availability = $this->form->getValue('availability');
		}
		$bookinObject->availability = $availability; //new field
		if ($this->form->getValue('record_condition') == null || $this->form->getValue('record_condition') == "")
		{
			$record_condition = "";
		}
		else
		{
			$record_condition = $this->form->getValue('record_condition');
		}
		$bookinObject->record_condition = $record_condition; //new field
		
		$bookinObject->object_id = $this->informationObj->id; //Parent ID

//		$bookinObject->requestorId = $this->form->getValue('requestor');
		$bookinObject->dispatcherId = $this->form->getValue('dispatcher');

		$bookinObject->save();
    }		

    if (isset($this->request->delete_relations))
    {
      foreach ($this->request->delete_relations as $item)
      {
        $params = $this->context->routing->parse(Qubit::pathInfo($item));
        $params['_sf_route']->resource->delete();
      }
    }
}

  public function execute($request)
  {
    parent::execute($request);

    if ($request->isMethod('post'))
    {
      $this->form->bind($request->getPostParameters());
      if ($this->form->isValid())
      {
        $this->processForm();

		$this->resource->requestorId = $this->form->getValue('requestor');
		$this->resource->dispatcherId = $this->form->getValue('dispatcher');
		$this->resource->time_period = $this->form->getValue('time_period');
		$this->resource->remarks = "Re-book Out: " . $this->form->getValue('remarks');

		If ($this->form->getValue('service_provider') != null) //
		{
			$this->resource->remarks->service_provider = $this->form->getValue('service_provider'); //Number of service Provider
			$this->resource->remarks->requestorId = null;
		}
		else
		{
			$this->resource->remarks->service_provider = null; //new field
			$this->resource->remarks->requestorId = $this->form->getValue('requestor');
		}
		$bookoutObject->dispatcherId = $this->form->getValue('dispatcher');


        $this->resource->save();

        if (null !== $next = $this->form->getValue('next'))
        {
          $this->redirect($next);
        }
		$this->redirect(array($this->informationObj, 'module' => 'informationobject'));
      }
    }
  }
}
